{"version":3,"file":"hammer.js","sources":["../src/utils/assign.js","../src/utils/utils-consts.js","../src/utils/prefixed.js","../src/browser.js","../src/touchactionjs/get-touchaction-props.js","../src/touchactionjs/touchaction-Consts.js","../src/inputjs/input-consts.js","../src/utils/each.js","../src/utils/bool-or-fn.js","../src/utils/in-str.js","../src/touchactionjs/clean-touch-actions.js","../src/touchactionjs/touchaction-constructor.js","../src/utils/has-parent.js","../src/inputjs/get-center.js","../src/inputjs/simple-clone-input-data.js","../src/inputjs/get-distance.js","../src/inputjs/get-angle.js","../src/inputjs/get-direction.js","../src/inputjs/compute-delta-xy.js","../src/inputjs/get-velocity.js","../src/inputjs/get-scale.js","../src/inputjs/get-rotation.js","../src/inputjs/compute-interval-input-data.js","../src/inputjs/compute-input-data.js","../src/inputjs/input-handler.js","../src/utils/split-str.js","../src/utils/add-event-listeners.js","../src/utils/remove-event-listeners.js","../src/utils/get-window-for-element.js","../src/inputjs/input-constructor.js","../src/utils/in-array.js","../src/input/pointerevent.js","../src/utils/to-array.js","../src/utils/unique-array.js","../src/input/touch.js","../src/input/mouse.js","../src/input/touchmouse.js","../src/inputjs/create-input-instance.js","../src/utils/invoke-array-arg.js","../src/recognizerjs/recognizer-consts.js","../src/utils/unique-id.js","../src/recognizerjs/get-recognizer-by-name-if-manager.js","../src/recognizerjs/state-str.js","../src/recognizerjs/recognizer-constructor.js","../src/recognizers/tap.js","../src/recognizers/attribute.js","../src/recognizerjs/direction-str.js","../src/recognizers/pan.js","../src/recognizers/swipe.js","../src/recognizers/pinch.js","../src/recognizers/rotate.js","../src/recognizers/press.js","../src/defaults.js","../src/manager.js","../src/input/singletouch.js","../src/utils/deprecate.js","../src/utils/extend.js","../src/utils/merge.js","../src/utils/inherit.js","../src/utils/bind-fn.js","../src/hammer.js"],"sourcesContent":["/**\r\n * @private\r\n * extend object.\r\n * means that properties in dest will be overwritten by the ones in src.\r\n * @param {Object} target\r\n * @param {...Object} objects_to_assign\r\n * @returns {Object} target\r\n */\r\nlet assign;\r\nif (typeof Object.assign !== 'function') {\r\n  assign = function assign(target) {\r\n    if (target === undefined || target === null) {\r\n      throw new TypeError('Cannot convert undefined or null to object');\r\n    }\r\n\r\n    let output = Object(target);\r\n    for (let index = 1; index < arguments.length; index++) {\r\n      const source = arguments[index];\r\n      if (source !== undefined && source !== null) {\r\n        for (const nextKey in source) {\r\n          if (source.hasOwnProperty(nextKey)) {\r\n            output[nextKey] = source[nextKey];\r\n          }\r\n        }\r\n      }\r\n    }\r\n    return output;\r\n  };\r\n} else {\r\n  assign = Object.assign;\r\n}\r\n\r\nexport default assign;","\r\nconst VENDOR_PREFIXES = ['', 'webkit', 'Moz', 'MS', 'ms', 'o'];\r\nconst TEST_ELEMENT = typeof document === \"undefined\" ? {style: {}} : document.createElement('div');\r\n\r\nconst TYPE_FUNCTION = 'function';\r\n\r\nconst { round, abs } = Math;\r\nconst { now } = Date;\r\n\r\nexport {\r\n    VENDOR_PREFIXES,\r\n    TEST_ELEMENT,\r\n    TYPE_FUNCTION,\r\n    round,\r\n    abs,\r\n    now\r\n};\r\n","import { VENDOR_PREFIXES } from './utils-consts';\r\n/**\r\n * @private\r\n * get the prefixed property\r\n * @param {Object} obj\r\n * @param {String} property\r\n * @returns {String|Undefined} prefixed\r\n */\r\nexport default function prefixed(obj, property) {\r\n  let prefix;\r\n  let prop;\r\n  let camelProp = property[0].toUpperCase() + property.slice(1);\r\n\r\n  let i = 0;\r\n  while (i < VENDOR_PREFIXES.length) {\r\n    prefix = VENDOR_PREFIXES[i];\r\n    prop = (prefix) ? prefix + camelProp : property;\r\n\r\n    if (prop in obj) {\r\n      return prop;\r\n    }\r\n    i++;\r\n  }\r\n  return undefined;\r\n}\r\n","/* eslint-disable no-new-func, no-nested-ternary */\r\n\r\nlet win;\r\n\r\nif (typeof window === \"undefined\") {\r\n\t// window is undefined in node.js\r\n\twin = {};\r\n} else {\r\n\twin = window;\r\n}\r\n/* eslint-enable no-new-func, no-nested-ternary */\r\n\r\nexport {win as window};\r\n","import prefixed from '../utils/prefixed';\r\nimport { TEST_ELEMENT } from '../utils/utils-consts';\r\nimport {window} from '../browser';\r\n\r\nexport const PREFIXED_TOUCH_ACTION = prefixed(TEST_ELEMENT.style, 'touchAction');\r\nexport const NATIVE_TOUCH_ACTION = PREFIXED_TOUCH_ACTION !== undefined;\r\n\r\nexport default function getTouchActionProps() {\r\n  if (!NATIVE_TOUCH_ACTION) {\r\n    return false;\r\n  }\r\n  let touchMap = {};\r\n  let cssSupports = window.CSS && window.CSS.supports;\r\n  ['auto', 'manipulation', 'pan-y', 'pan-x', 'pan-x pan-y', 'none'].forEach((val) => {\r\n\r\n    // If css.supports is not supported but there is native touch-action assume it supports\r\n    // all values. This is the case for IE 10 and 11.\r\n    return touchMap[val] = cssSupports ? window.CSS.supports('touch-action', val) : true;\r\n  });\r\n  return touchMap;\r\n}\r\n","import getTouchActionProps from './get-touchaction-props';\r\n\r\n\r\n\r\n// magical touchAction value\r\nconst TOUCH_ACTION_COMPUTE = 'compute';\r\nconst TOUCH_ACTION_AUTO = 'auto';\r\nconst TOUCH_ACTION_MANIPULATION = 'manipulation'; // not implemented\r\nconst TOUCH_ACTION_NONE = 'none';\r\nconst TOUCH_ACTION_PAN_X = 'pan-x';\r\nconst TOUCH_ACTION_PAN_Y = 'pan-y';\r\nconst TOUCH_ACTION_MAP = getTouchActionProps();\r\n\r\nexport {\r\n  TOUCH_ACTION_AUTO,\r\n  TOUCH_ACTION_COMPUTE,\r\n  TOUCH_ACTION_MANIPULATION,\r\n  TOUCH_ACTION_NONE,\r\n  TOUCH_ACTION_PAN_X,\r\n  TOUCH_ACTION_PAN_Y,\r\n  TOUCH_ACTION_MAP\r\n};\r\n","import prefixed from '../utils/prefixed';\r\nimport {window} from \"../browser\";\r\n\r\nconst MOBILE_REGEX = /mobile|tablet|ip(ad|hone|od)|android/i;\r\n\r\nconst SUPPORT_TOUCH = ('ontouchstart' in window);\r\nconst SUPPORT_POINTER_EVENTS = prefixed(window, 'PointerEvent') !== undefined;\r\nconst SUPPORT_ONLY_TOUCH = SUPPORT_TOUCH && MOBILE_REGEX.test(navigator.userAgent);\r\n\r\nconst INPUT_TYPE_TOUCH = 'touch';\r\nconst INPUT_TYPE_PEN = 'pen';\r\nconst INPUT_TYPE_MOUSE = 'mouse';\r\nconst INPUT_TYPE_KINECT = 'kinect';\r\n\r\nconst COMPUTE_INTERVAL = 25;\r\n\r\nconst INPUT_START = 1;\r\nconst INPUT_MOVE = 2;\r\nconst INPUT_END = 4;\r\nconst INPUT_CANCEL = 8;\r\n\r\nconst DIRECTION_NONE = 1;\r\nconst DIRECTION_LEFT = 2;\r\nconst DIRECTION_RIGHT = 4;\r\nconst DIRECTION_UP = 8;\r\nconst DIRECTION_DOWN = 16;\r\n\r\nconst DIRECTION_HORIZONTAL = DIRECTION_LEFT | DIRECTION_RIGHT;\r\nconst DIRECTION_VERTICAL = DIRECTION_UP | DIRECTION_DOWN;\r\nconst DIRECTION_ALL = DIRECTION_HORIZONTAL | DIRECTION_VERTICAL;\r\n\r\nconst PROPS_XY = ['x', 'y'];\r\nconst PROPS_CLIENT_XY = ['clientX', 'clientY'];\r\n\r\nexport {\r\n    MOBILE_REGEX,\r\n    SUPPORT_ONLY_TOUCH,\r\n    SUPPORT_POINTER_EVENTS,\r\n    SUPPORT_TOUCH,\r\n    INPUT_TYPE_KINECT,\r\n    INPUT_TYPE_MOUSE,\r\n    INPUT_TYPE_PEN,\r\n    INPUT_TYPE_TOUCH,\r\n    COMPUTE_INTERVAL,\r\n    INPUT_START,\r\n    INPUT_MOVE,\r\n    INPUT_END,\r\n    INPUT_CANCEL,\r\n    DIRECTION_NONE,\r\n    DIRECTION_LEFT,\r\n    DIRECTION_RIGHT,\r\n    DIRECTION_UP,\r\n    DIRECTION_DOWN,\r\n    DIRECTION_HORIZONTAL,\r\n    DIRECTION_VERTICAL,\r\n    DIRECTION_ALL,\r\n    PROPS_XY,\r\n    PROPS_CLIENT_XY\r\n};\r\n","/**\r\n * @private\r\n * walk objects and arrays\r\n * @param {Object} obj\r\n * @param {Function} iterator\r\n * @param {Object} context\r\n */\r\nexport default function each(obj, iterator, context) {\r\n  let i;\r\n\r\n  if (!obj) {\r\n    return;\r\n  }\r\n\r\n  if (obj.forEach) {\r\n    obj.forEach(iterator, context);\r\n  } else if (obj.length !== undefined) {\r\n    i = 0;\r\n    while (i < obj.length) {\r\n      iterator.call(context, obj[i], i, obj);\r\n      i++;\r\n    }\r\n  } else {\r\n    for (i in obj) {\r\n      obj.hasOwnProperty(i) && iterator.call(context, obj[i], i, obj);\r\n    }\r\n  }\r\n}\r\n","import { TYPE_FUNCTION } from './utils-consts';\r\n/**\r\n * @private\r\n * let a boolean value also be a function that must return a boolean\r\n * this first item in args will be used as the context\r\n * @param {Boolean|Function} val\r\n * @param {Array} [args]\r\n * @returns {Boolean}\r\n */\r\nexport default function boolOrFn(val, args) {\r\n  if (typeof val === TYPE_FUNCTION) {\r\n    return val.apply(args ? args[0] || undefined : undefined, args);\r\n  }\r\n  return val;\r\n}\r\n","/**\r\n * @private\r\n * small indexOf wrapper\r\n * @param {String} str\r\n * @param {String} find\r\n * @returns {Boolean} found\r\n */\r\nexport default function inStr(str, find) {\r\n  return str.indexOf(find) > -1;\r\n}\r\n","import inStr from '../utils/in-str';\r\nimport {\r\n    TOUCH_ACTION_NONE,\r\n    TOUCH_ACTION_PAN_X,\r\n    TOUCH_ACTION_PAN_Y,\r\n    TOUCH_ACTION_MANIPULATION,\r\n    TOUCH_ACTION_AUTO\r\n} from './touchaction-Consts';\r\n\r\n/**\r\n * @private\r\n * when the touchActions are collected they are not a valid value, so we need to clean things up. *\r\n * @param {String} actions\r\n * @returns {*}\r\n */\r\nexport default function cleanTouchActions(actions) {\r\n  // none\r\n  if (inStr(actions, TOUCH_ACTION_NONE)) {\r\n    return TOUCH_ACTION_NONE;\r\n  }\r\n\r\n  let hasPanX = inStr(actions, TOUCH_ACTION_PAN_X);\r\n  let hasPanY = inStr(actions, TOUCH_ACTION_PAN_Y);\r\n\r\n  // if both pan-x and pan-y are set (different recognizers\r\n  // for different directions, e.g. horizontal pan but vertical swipe?)\r\n  // we need none (as otherwise with pan-x pan-y combined none of these\r\n  // recognizers will work, since the browser would handle all panning\r\n  if (hasPanX && hasPanY) {\r\n    return TOUCH_ACTION_NONE;\r\n  }\r\n\r\n  // pan-x OR pan-y\r\n  if (hasPanX || hasPanY) {\r\n    return hasPanX ? TOUCH_ACTION_PAN_X : TOUCH_ACTION_PAN_Y;\r\n  }\r\n\r\n  // manipulation\r\n  if (inStr(actions, TOUCH_ACTION_MANIPULATION)) {\r\n    return TOUCH_ACTION_MANIPULATION;\r\n  }\r\n\r\n  return TOUCH_ACTION_AUTO;\r\n}\r\n","import {\r\n    TOUCH_ACTION_COMPUTE,\r\n    TOUCH_ACTION_MAP,\r\n    TOUCH_ACTION_NONE,\r\n    TOUCH_ACTION_PAN_X,\r\n    TOUCH_ACTION_PAN_Y\r\n} from './touchaction-Consts';\r\nimport {\r\n  NATIVE_TOUCH_ACTION,\r\n  PREFIXED_TOUCH_ACTION,\r\n} from \"./get-touchaction-props\";\r\nimport {\r\n    DIRECTION_VERTICAL,\r\n    DIRECTION_HORIZONTAL\r\n} from '../inputjs/input-consts';\r\nimport each from '../utils/each';\r\nimport boolOrFn from '../utils/bool-or-fn';\r\nimport inStr from '../utils/in-str';\r\nimport cleanTouchActions from './clean-touch-actions';\r\n\r\n/**\r\n * @private\r\n * Touch Action\r\n * sets the touchAction property or uses the js alternative\r\n * @param {Manager} manager\r\n * @param {String} value\r\n * @constructor\r\n */\r\nexport default class TouchAction {\r\n  constructor(manager, value) {\r\n    this.manager = manager;\r\n    this.set(value);\r\n  }\r\n\r\n  /**\r\n   * @private\r\n   * set the touchAction value on the element or enable the polyfill\r\n   * @param {String} value\r\n   */\r\n  set(value) {\r\n    // find out the touch-action by the event handlers\r\n    if (value === TOUCH_ACTION_COMPUTE) {\r\n      value = this.compute();\r\n    }\r\n\r\n    if (NATIVE_TOUCH_ACTION && this.manager.element.style && TOUCH_ACTION_MAP[value]) {\r\n      this.manager.element.style[PREFIXED_TOUCH_ACTION] = value;\r\n    }\r\n    this.actions = value.toLowerCase().trim();\r\n  }\r\n\r\n  /**\r\n   * @private\r\n   * just re-set the touchAction value\r\n   */\r\n  update() {\r\n    this.set(this.manager.options.touchAction);\r\n  }\r\n\r\n  /**\r\n   * @private\r\n   * compute the value for the touchAction property based on the recognizer's settings\r\n   * @returns {String} value\r\n   */\r\n  compute() {\r\n    let actions = [];\r\n    each(this.manager.recognizers, (recognizer) => {\r\n      if (boolOrFn(recognizer.options.enable, [recognizer])) {\r\n        actions = actions.concat(recognizer.getTouchAction());\r\n      }\r\n    });\r\n    return cleanTouchActions(actions.join(' '));\r\n  }\r\n\r\n  /**\r\n   * @private\r\n   * this method is called on each input cycle and provides the preventing of the browser behavior\r\n   * @param {Object} input\r\n   */\r\n  preventDefaults(input) {\r\n    let { srcEvent } = input;\r\n    let direction = input.offsetDirection;\r\n\r\n    // if the touch action did prevented once this session\r\n    if (this.manager.session.prevented) {\r\n      srcEvent.preventDefault();\r\n      return;\r\n    }\r\n\r\n    let { actions } = this;\r\n    let hasNone = inStr(actions, TOUCH_ACTION_NONE) && !TOUCH_ACTION_MAP[TOUCH_ACTION_NONE];\r\n    let hasPanY = inStr(actions, TOUCH_ACTION_PAN_Y) && !TOUCH_ACTION_MAP[TOUCH_ACTION_PAN_Y];\r\n    let hasPanX = inStr(actions, TOUCH_ACTION_PAN_X) && !TOUCH_ACTION_MAP[TOUCH_ACTION_PAN_X];\r\n\r\n    if (hasNone) {\r\n      // do not prevent defaults if this is a tap gesture\r\n      let isTapPointer = input.pointers.length === 1;\r\n      let isTapMovement = input.distance < 2;\r\n      let isTapTouchTime = input.deltaTime < 250;\r\n\r\n      if (isTapPointer && isTapMovement && isTapTouchTime) {\r\n        return;\r\n      }\r\n    }\r\n\r\n    if (hasPanX && hasPanY) {\r\n      // `pan-x pan-y` means browser handles all scrolling/panning, do not prevent\r\n      return;\r\n    }\r\n\r\n    if (hasNone ||\r\n        (hasPanY && direction & DIRECTION_HORIZONTAL) ||\r\n        (hasPanX && direction & DIRECTION_VERTICAL)) {\r\n      return this.preventSrc(srcEvent);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @private\r\n   * call preventDefault to prevent the browser's default behavior (scrolling in most cases)\r\n   * @param {Object} srcEvent\r\n   */\r\n  preventSrc(srcEvent) {\r\n    this.manager.session.prevented = true;\r\n    srcEvent.preventDefault();\r\n  }\r\n}\r\n","/**\r\n * @private\r\n * find if a node is in the given parent\r\n * @method hasParent\r\n * @param {HTMLElement} node\r\n * @param {HTMLElement} parent\r\n * @return {Boolean} found\r\n */\r\nexport default function hasParent(node, parent) {\r\n  while (node) {\r\n    if (node === parent) {\r\n      return true;\r\n    }\r\n    node = node.parentNode;\r\n  }\r\n  return false;\r\n}\r\n","import { round } from '../utils/utils-consts';\r\n\r\n/**\r\n * @private\r\n * get the center of all the pointers\r\n * @param {Array} pointers\r\n * @return {Object} center contains `x` and `y` properties\r\n */\r\nexport default function getCenter(pointers) {\r\n  let pointersLength = pointers.length;\r\n\r\n  // no need to loop when only one touch\r\n  if (pointersLength === 1) {\r\n    return {\r\n      x: round(pointers[0].clientX),\r\n      y: round(pointers[0].clientY)\r\n    };\r\n  }\r\n\r\n  let x = 0;\r\n  let y = 0;\r\n  let i = 0;\r\n  while (i < pointersLength) {\r\n    x += pointers[i].clientX;\r\n    y += pointers[i].clientY;\r\n    i++;\r\n  }\r\n\r\n  return {\r\n    x: round(x / pointersLength),\r\n    y: round(y / pointersLength)\r\n  };\r\n}\r\n","import { now,round } from '../utils/utils-consts';\r\nimport getCenter from './get-center';\r\n\r\n/**\r\n * @private\r\n * create a simple clone from the input used for storage of firstInput and firstMultiple\r\n * @param {Object} input\r\n * @returns {Object} clonedInputData\r\n */\r\nexport default function simpleCloneInputData(input) {\r\n  // make a simple copy of the pointers because we will get a reference if we don't\r\n  // we only need clientXY for the calculations\r\n  let pointers = [];\r\n  let i = 0;\r\n  while (i < input.pointers.length) {\r\n    pointers[i] = {\r\n      clientX: round(input.pointers[i].clientX),\r\n      clientY: round(input.pointers[i].clientY)\r\n    };\r\n    i++;\r\n  }\r\n\r\n  return {\r\n    timeStamp: now(),\r\n    pointers,\r\n    center: getCenter(pointers),\r\n    deltaX: input.deltaX,\r\n    deltaY: input.deltaY\r\n  };\r\n}\r\n","import { PROPS_XY } from './input-consts';\r\n\r\n/**\r\n * @private\r\n * calculate the absolute distance between two points\r\n * @param {Object} p1 {x, y}\r\n * @param {Object} p2 {x, y}\r\n * @param {Array} [props] containing x and y keys\r\n * @return {Number} distance\r\n */\r\nexport default function getDistance(p1, p2, props) {\r\n  if (!props) {\r\n    props = PROPS_XY;\r\n  }\r\n  let x = p2[props[0]] - p1[props[0]];\r\n  let y = p2[props[1]] - p1[props[1]];\r\n\r\n  return Math.sqrt((x * x) + (y * y));\r\n}\r\n","import { PROPS_XY } from './input-consts';\r\n\r\n/**\r\n * @private\r\n * calculate the angle between two coordinates\r\n * @param {Object} p1\r\n * @param {Object} p2\r\n * @param {Array} [props] containing x and y keys\r\n * @return {Number} angle\r\n */\r\nexport default function getAngle(p1, p2, props) {\r\n  if (!props) {\r\n    props = PROPS_XY;\r\n  }\r\n  let x = p2[props[0]] - p1[props[0]];\r\n  let y = p2[props[1]] - p1[props[1]];\r\n  return Math.atan2(y, x) * 180 / Math.PI;\r\n}\r\n","import { abs } from '../utils/utils-consts';\r\nimport { DIRECTION_NONE,DIRECTION_LEFT,DIRECTION_RIGHT,DIRECTION_UP,DIRECTION_DOWN } from './input-consts';\r\n\r\n/**\r\n * @private\r\n * get the direction between two points\r\n * @param {Number} x\r\n * @param {Number} y\r\n * @return {Number} direction\r\n */\r\nexport default function getDirection(x, y) {\r\n  if (x === y) {\r\n    return DIRECTION_NONE;\r\n  }\r\n\r\n  if (abs(x) >= abs(y)) {\r\n    return x < 0 ? DIRECTION_LEFT : DIRECTION_RIGHT;\r\n  }\r\n  return y < 0 ? DIRECTION_UP : DIRECTION_DOWN;\r\n}\r\n","import { INPUT_START, INPUT_END } from './input-consts';\r\n\r\nexport default function computeDeltaXY(session, input) {\r\n  let { center } = input;\r\n  // let { offsetDelta:offset = {}, prevDelta = {}, prevInput = {} } = session;\r\n  // jscs throwing error on defalut destructured values and without defaults tests fail\r\n  let offset = session.offsetDelta || {};\r\n  let prevDelta = session.prevDelta || {};\r\n  let prevInput = session.prevInput || {};\r\n\r\n  if (input.eventType === INPUT_START || prevInput.eventType === INPUT_END) {\r\n    prevDelta = session.prevDelta = {\r\n      x: prevInput.deltaX || 0,\r\n      y: prevInput.deltaY || 0\r\n    };\r\n\r\n    offset = session.offsetDelta = {\r\n      x: center.x,\r\n      y: center.y\r\n    };\r\n  }\r\n\r\n  input.deltaX = prevDelta.x + (center.x - offset.x);\r\n  input.deltaY = prevDelta.y + (center.y - offset.y);\r\n}\r\n","/**\r\n * @private\r\n * calculate the velocity between two points. unit is in px per ms.\r\n * @param {Number} deltaTime\r\n * @param {Number} x\r\n * @param {Number} y\r\n * @return {Object} velocity `x` and `y`\r\n */\r\nexport default function getVelocity(deltaTime, x, y) {\r\n  return {\r\n    x: x / deltaTime || 0,\r\n    y: y / deltaTime || 0\r\n  };\r\n}\r\n","import { PROPS_CLIENT_XY } from './input-consts';\r\nimport getDistance from './get-distance';\r\n/**\r\n * @private\r\n * calculate the scale factor between two pointersets\r\n * no scale is 1, and goes down to 0 when pinched together, and bigger when pinched out\r\n * @param {Array} start array of pointers\r\n * @param {Array} end array of pointers\r\n * @return {Number} scale\r\n */\r\nexport default function getScale(start, end) {\r\n  return getDistance(end[0], end[1], PROPS_CLIENT_XY) / getDistance(start[0], start[1], PROPS_CLIENT_XY);\r\n}\r\n","import getAngle from './get-angle';\r\nimport { PROPS_CLIENT_XY } from './input-consts';\r\n\r\n/**\r\n * @private\r\n * calculate the rotation degrees between two pointersets\r\n * @param {Array} start array of pointers\r\n * @param {Array} end array of pointers\r\n * @return {Number} rotation\r\n */\r\nexport default function getRotation(start, end) {\r\n  let startSorted = start[0].identifier < start[1].identifier;\r\n  let start0 = startSorted ? start[0] : start[1];\r\n  let start1 = startSorted ? start[1] : start[0];\r\n  let endSorted = end[0].identifier < end[1].identifier;\r\n  let end0 = endSorted ? end[0] : end[1];\r\n  let end1 = endSorted ? end[1] : end[0];\r\n  return getAngle(end0, end1, PROPS_CLIENT_XY) - getAngle(start0, start1, PROPS_CLIENT_XY);\r\n}\r\n","import { INPUT_CANCEL,COMPUTE_INTERVAL } from './input-consts';\r\nimport { abs } from '../utils/utils-consts';\r\nimport getVelocity from './get-velocity';\r\nimport getDirection from './get-direction';\r\n\r\n/**\r\n * @private\r\n * velocity is calculated every x ms\r\n * @param {Object} session\r\n * @param {Object} input\r\n */\r\nexport default function computeIntervalInputData(session, input) {\r\n  let last = session.lastInterval || input;\r\n  let deltaTime = input.timeStamp - last.timeStamp;\r\n  let velocity;\r\n  let velocityX;\r\n  let velocityY;\r\n  let direction;\r\n\r\n  if (input.eventType !== INPUT_CANCEL && (deltaTime > COMPUTE_INTERVAL || last.velocity === undefined)) {\r\n    let deltaX = input.deltaX - last.deltaX;\r\n    let deltaY = input.deltaY - last.deltaY;\r\n\r\n    let v = getVelocity(deltaTime, deltaX, deltaY);\r\n    velocityX = v.x;\r\n    velocityY = v.y;\r\n    velocity = (abs(v.x) > abs(v.y)) ? v.x : v.y;\r\n    direction = getDirection(deltaX, deltaY);\r\n\r\n    session.lastInterval = input;\r\n  } else {\r\n    // use latest velocity info if it doesn't overtake a minimum period\r\n    velocity = last.velocity;\r\n    velocityX = last.velocityX;\r\n    velocityY = last.velocityY;\r\n    direction = last.direction;\r\n  }\r\n\r\n  input.velocity = velocity;\r\n  input.velocityX = velocityX;\r\n  input.velocityY = velocityY;\r\n  input.direction = direction;\r\n}\r\n","import { now } from '../utils/utils-consts';\r\nimport { abs } from '../utils/utils-consts';\r\nimport hasParent from '../utils/has-parent';\r\nimport simpleCloneInputData from './simple-clone-input-data';\r\nimport getCenter from './get-center';\r\nimport getDistance from './get-distance';\r\nimport getAngle from './get-angle';\r\nimport getDirection from './get-direction';\r\nimport computeDeltaXY from './compute-delta-xy';\r\nimport getVelocity from './get-velocity';\r\nimport getScale from './get-scale';\r\nimport getRotation from './get-rotation';\r\nimport computeIntervalInputData from './compute-interval-input-data';\r\n\r\n/**\r\n* @private\r\n * extend the data with some usable properties like scale, rotate, velocity etc\r\n * @param {Object} manager\r\n * @param {Object} input\r\n */\r\nexport default function computeInputData(manager, input) {\r\n  let { session } = manager;\r\n  let { pointers } = input;\r\n  let { length:pointersLength } = pointers;\r\n\r\n  // store the first input to calculate the distance and direction\r\n  if (!session.firstInput) {\r\n    session.firstInput = simpleCloneInputData(input);\r\n  }\r\n\r\n  // to compute scale and rotation we need to store the multiple touches\r\n  if (pointersLength > 1 && !session.firstMultiple) {\r\n    session.firstMultiple = simpleCloneInputData(input);\r\n  } else if (pointersLength === 1) {\r\n    session.firstMultiple = false;\r\n  }\r\n\r\n  let { firstInput, firstMultiple } = session;\r\n  let offsetCenter = firstMultiple ? firstMultiple.center : firstInput.center;\r\n\r\n  let center = input.center = getCenter(pointers);\r\n  input.timeStamp = now();\r\n  input.deltaTime = input.timeStamp - firstInput.timeStamp;\r\n\r\n  input.angle = getAngle(offsetCenter, center);\r\n  input.distance = getDistance(offsetCenter, center);\r\n\r\n  computeDeltaXY(session, input);\r\n  input.offsetDirection = getDirection(input.deltaX, input.deltaY);\r\n\r\n  let overallVelocity = getVelocity(input.deltaTime, input.deltaX, input.deltaY);\r\n  input.overallVelocityX = overallVelocity.x;\r\n  input.overallVelocityY = overallVelocity.y;\r\n  input.overallVelocity = (abs(overallVelocity.x) > abs(overallVelocity.y)) ? overallVelocity.x : overallVelocity.y;\r\n\r\n  input.scale = firstMultiple ? getScale(firstMultiple.pointers, pointers) : 1;\r\n  input.rotation = firstMultiple ? getRotation(firstMultiple.pointers, pointers) : 0;\r\n\r\n  input.maxPointers = !session.prevInput ? input.pointers.length : ((input.pointers.length >\r\n  session.prevInput.maxPointers) ? input.pointers.length : session.prevInput.maxPointers);\r\n\r\n  computeIntervalInputData(session, input);\r\n\r\n  // find the correct target\r\n  let target = manager.element;\r\n  const srcEvent = input.srcEvent;\r\n  let srcEventTarget;\r\n\r\n  if (srcEvent.composedPath) {\r\n    srcEventTarget = srcEvent.composedPath()[0];\r\n  } else if (srcEvent.path) {\r\n    srcEventTarget = srcEvent.path[0];\r\n  } else {\r\n    srcEventTarget = srcEvent.target;\r\n  }\r\n\r\n  if (hasParent(srcEventTarget, target)) {\r\n    target = srcEventTarget;\r\n  }\r\n  input.target = target;\r\n}\r\n","import { INPUT_START,INPUT_END,INPUT_CANCEL } from './input-consts';\r\nimport computeInputData from './compute-input-data';\r\n\r\n/**\r\n * @private\r\n * handle input events\r\n * @param {Manager} manager\r\n * @param {String} eventType\r\n * @param {Object} input\r\n */\r\nexport default function inputHandler(manager, eventType, input) {\r\n  let pointersLen = input.pointers.length;\r\n  let changedPointersLen = input.changedPointers.length;\r\n  let isFirst = (eventType & INPUT_START && (pointersLen - changedPointersLen === 0));\r\n  let isFinal = (eventType & (INPUT_END | INPUT_CANCEL) && (pointersLen - changedPointersLen === 0));\r\n\r\n  input.isFirst = !!isFirst;\r\n  input.isFinal = !!isFinal;\r\n\r\n  if (isFirst) {\r\n    manager.session = {};\r\n  }\r\n\r\n  // source event is the normalized value of the domEvents\r\n  // like 'touchstart, mouseup, pointerdown'\r\n  input.eventType = eventType;\r\n\r\n  // compute scale, rotation etc\r\n  computeInputData(manager, input);\r\n\r\n  // emit secret event\r\n  manager.emit('hammer.input', input);\r\n\r\n  manager.recognize(input);\r\n  manager.session.prevInput = input;\r\n}\r\n","/**\r\n * @private\r\n * split string on whitespace\r\n * @param {String} str\r\n * @returns {Array} words\r\n */\r\n\r\nexport default function splitStr(str) {\r\n  return str.trim().split(/\\s+/g);\r\n}\r\n","import each from './each';\r\nimport splitStr from './split-str';\r\n/**\r\n * @private\r\n * addEventListener with multiple events at once\r\n * @param {EventTarget} target\r\n * @param {String} types\r\n * @param {Function} handler\r\n */\r\nexport default function addEventListeners(target, types, handler) {\r\n  each(splitStr(types), (type) => {\r\n    target.addEventListener(type, handler, false);\r\n  });\r\n}\r\n","import each from './each';\r\nimport splitStr from './split-str';\r\n/**\r\n * @private\r\n * removeEventListener with multiple events at once\r\n * @param {EventTarget} target\r\n * @param {String} types\r\n * @param {Function} handler\r\n */\r\nexport default function removeEventListeners(target, types, handler) {\r\n  each(splitStr(types), (type) => {\r\n    target.removeEventListener(type, handler, false);\r\n  });\r\n}\r\n","/**\r\n * @private\r\n * get the window object of an element\r\n * @param {HTMLElement} element\r\n * @returns {DocumentView|Window}\r\n */\r\nexport default function getWindowForElement(element) {\r\n  let doc = element.ownerDocument || element;\r\n  return (doc.defaultView || doc.parentWindow || window);\r\n}\r\n","import boolOrFn from '../utils/bool-or-fn';\r\nimport addEventListeners from '../utils/add-event-listeners';\r\nimport removeEventListeners from '../utils/remove-event-listeners';\r\nimport getWindowForElement from '../utils/get-window-for-element';\r\n\r\n/**\r\n * @private\r\n * create new input type manager\r\n * @param {Manager} manager\r\n * @param {Function} callback\r\n * @returns {Input}\r\n * @constructor\r\n */\r\nexport default class Input {\r\n  constructor(manager, callback) {\r\n    let self = this;\r\n    this.manager = manager;\r\n    this.callback = callback;\r\n    this.element = manager.element;\r\n    this.target = manager.options.inputTarget;\r\n\r\n    // smaller wrapper around the handler, for the scope and the enabled state of the manager,\r\n    // so when disabled the input events are completely bypassed.\r\n    this.domHandler = function(ev) {\r\n      if (boolOrFn(manager.options.enable, [manager])) {\r\n        self.handler(ev);\r\n      }\r\n    };\r\n\r\n    this.init();\r\n\r\n  }\r\n  /**\r\n   * @private\r\n   * should handle the inputEvent data and trigger the callback\r\n   * @virtual\r\n   */\r\n  handler() { }\r\n\r\n  /**\r\n   * @private\r\n   * bind the events\r\n   */\r\n  init() {\r\n    this.evEl && addEventListeners(this.element, this.evEl, this.domHandler);\r\n    this.evTarget && addEventListeners(this.target, this.evTarget, this.domHandler);\r\n    this.evWin && addEventListeners(getWindowForElement(this.element), this.evWin, this.domHandler);\r\n  }\r\n\r\n  /**\r\n   * @private\r\n   * unbind the events\r\n   */\r\n  destroy() {\r\n    this.evEl && removeEventListeners(this.element, this.evEl, this.domHandler);\r\n    this.evTarget && removeEventListeners(this.target, this.evTarget, this.domHandler);\r\n    this.evWin && removeEventListeners(getWindowForElement(this.element), this.evWin, this.domHandler);\r\n  }\r\n}\r\n","/**\r\n * @private\r\n * find if a array contains the object using indexOf or a simple polyFill\r\n * @param {Array} src\r\n * @param {String} find\r\n * @param {String} [findByKey]\r\n * @return {Boolean|Number} false when not found, or the index\r\n */\r\nexport default function inArray(src, find, findByKey) {\r\n  if (src.indexOf && !findByKey) {\r\n    return src.indexOf(find);\r\n  } else {\r\n    let i = 0;\r\n    while (i < src.length) {\r\n      if ((findByKey && src[i][findByKey] == find) || (!findByKey && src[i] === find)) {// do not use === here, test fails\r\n        return i;\r\n      }\r\n      i++;\r\n    }\r\n    return -1;\r\n  }\r\n}\r\n","import {\r\n    INPUT_START,\r\n    INPUT_END,\r\n    INPUT_CANCEL,\r\n    INPUT_MOVE,\r\n    INPUT_TYPE_TOUCH,\r\n    INPUT_TYPE_MOUSE,\r\n    INPUT_TYPE_PEN,\r\n    INPUT_TYPE_KINECT\r\n} from '../inputjs/input-consts';\r\nimport {window} from \"../browser\";\r\nimport Input from '../inputjs/input-constructor';\r\nimport inArray from '../utils/in-array';\r\n\r\nconst POINTER_INPUT_MAP = {\r\n  pointerdown: INPUT_START,\r\n  pointermove: INPUT_MOVE,\r\n  pointerup: INPUT_END,\r\n  pointercancel: INPUT_CANCEL,\r\n  pointerout: INPUT_CANCEL\r\n};\r\n\r\n// in IE10 the pointer types is defined as an enum\r\nconst IE10_POINTER_TYPE_ENUM = {\r\n  2: INPUT_TYPE_TOUCH,\r\n  3: INPUT_TYPE_PEN,\r\n  4: INPUT_TYPE_MOUSE,\r\n  5: INPUT_TYPE_KINECT // see https://twitter.com/jacobrossi/status/480596438489890816\r\n};\r\n\r\nlet POINTER_ELEMENT_EVENTS = 'pointerdown';\r\nlet POINTER_WINDOW_EVENTS = 'pointermove pointerup pointercancel';\r\n\r\n// IE10 has prefixed support, and case-sensitive\r\nif (window.MSPointerEvent && !window.PointerEvent) {\r\n  POINTER_ELEMENT_EVENTS = 'MSPointerDown';\r\n  POINTER_WINDOW_EVENTS = 'MSPointerMove MSPointerUp MSPointerCancel';\r\n}\r\n\r\n/**\r\n * @private\r\n * Pointer events input\r\n * @constructor\r\n * @extends Input\r\n */\r\nexport default class PointerEventInput extends Input {\r\n  constructor() {\r\n    var proto = PointerEventInput.prototype;\r\n\r\n    proto.evEl = POINTER_ELEMENT_EVENTS;\r\n    proto.evWin = POINTER_WINDOW_EVENTS;\r\n    super(...arguments);\r\n    this.store = (this.manager.session.pointerEvents = []);\r\n  }\r\n\r\n  /**\r\n   * @private\r\n   * handle mouse events\r\n   * @param {Object} ev\r\n   */\r\n  handler(ev) {\r\n    let { store } = this;\r\n    let removePointer = false;\r\n\r\n    let eventTypeNormalized = ev.type.toLowerCase().replace('ms', '');\r\n    let eventType = POINTER_INPUT_MAP[eventTypeNormalized];\r\n    let pointerType = IE10_POINTER_TYPE_ENUM[ev.pointerType] || ev.pointerType;\r\n\r\n    let isTouch = (pointerType === INPUT_TYPE_TOUCH);\r\n\r\n    // get index of the event in the store\r\n    let storeIndex = inArray(store, ev.pointerId, 'pointerId');\r\n\r\n    // start and mouse must be down\r\n    if (eventType & INPUT_START && (ev.button === 0 || isTouch)) {\r\n      if (storeIndex < 0) {\r\n        store.push(ev);\r\n        storeIndex = store.length - 1;\r\n      }\r\n    } else if (eventType & (INPUT_END | INPUT_CANCEL)) {\r\n      removePointer = true;\r\n    }\r\n\r\n    // it not found, so the pointer hasn't been down (so it's probably a hover)\r\n    if (storeIndex < 0) {\r\n      return;\r\n    }\r\n\r\n    // update the event in the store\r\n    store[storeIndex] = ev;\r\n\r\n    this.callback(this.manager, eventType, {\r\n      pointers: store,\r\n      changedPointers: [ev],\r\n      pointerType,\r\n      srcEvent: ev\r\n    });\r\n\r\n    if (removePointer) {\r\n      // remove from the store\r\n      store.splice(storeIndex, 1);\r\n    }\r\n  }\r\n}\r\n","/**\r\n * @private\r\n * convert array-like objects to real arrays\r\n * @param {Object} obj\r\n * @returns {Array}\r\n */\r\nexport default function toArray(obj) {\r\n  return Array.prototype.slice.call(obj, 0);\r\n}\r\n","import inArray from './in-array';\r\n\r\n/**\r\n * @private\r\n * unique array with objects based on a key (like 'id') or just by the array's value\r\n * @param {Array} src [{id:1},{id:2},{id:1}]\r\n * @param {String} [key]\r\n * @param {Boolean} [sort=False]\r\n * @returns {Array} [{id:1},{id:2}]\r\n */\r\nexport default function uniqueArray(src, key, sort) {\r\n  let results = [];\r\n  let values = [];\r\n  let i = 0;\r\n\r\n  while (i < src.length) {\r\n    let val = key ? src[i][key] : src[i];\r\n    if (inArray(values, val) < 0) {\r\n      results.push(src[i]);\r\n    }\r\n    values[i] = val;\r\n    i++;\r\n  }\r\n\r\n  if (sort) {\r\n    if (!key) {\r\n      results = results.sort();\r\n    } else {\r\n      results = results.sort((a, b) => {\r\n        return a[key] > b[key];\r\n      });\r\n    }\r\n  }\r\n\r\n  return results;\r\n}\r\n","import {\r\n  INPUT_START,\r\n  INPUT_MOVE,\r\n  INPUT_END,\r\n  INPUT_CANCEL,\r\n  INPUT_TYPE_TOUCH\r\n} from '../inputjs/input-consts';\r\nimport Input from '../inputjs/input-constructor';\r\nimport toArray from '../utils/to-array';\r\nimport hasParent from '../utils/has-parent';\r\nimport uniqueArray from '../utils/unique-array';\r\n\r\nconst TOUCH_INPUT_MAP = {\r\n  touchstart: INPUT_START,\r\n  touchmove: INPUT_MOVE,\r\n  touchend: INPUT_END,\r\n  touchcancel: INPUT_CANCEL\r\n};\r\n\r\nconst TOUCH_TARGET_EVENTS = 'touchstart touchmove touchend touchcancel';\r\n\r\n/**\r\n * @private\r\n * Multi-user touch events input\r\n * @constructor\r\n * @extends Input\r\n */\r\nexport default class TouchInput extends Input {\r\n  constructor() {\r\n    TouchInput.prototype.evTarget = TOUCH_TARGET_EVENTS;\r\n    super(...arguments);\r\n    this.targetIds = {};\r\n    // this.evTarget = TOUCH_TARGET_EVENTS;\r\n  }\r\n  handler(ev) {\r\n    let type = TOUCH_INPUT_MAP[ev.type];\r\n    let touches = getTouches.call(this, ev, type);\r\n    if (!touches) {\r\n      return;\r\n    }\r\n\r\n    this.callback(this.manager, type, {\r\n      pointers: touches[0],\r\n      changedPointers: touches[1],\r\n      pointerType: INPUT_TYPE_TOUCH,\r\n      srcEvent: ev\r\n    });\r\n  }\r\n}\r\n\r\n/**\r\n * @private\r\n * @this {TouchInput}\r\n * @param {Object} ev\r\n * @param {Number} type flag\r\n * @returns {undefined|Array} [all, changed]\r\n */\r\nfunction getTouches(ev, type) {\r\n  let allTouches = toArray(ev.touches);\r\n  let { targetIds } = this;\r\n\r\n  // when there is only one touch, the process can be simplified\r\n  if (type & (INPUT_START | INPUT_MOVE) && allTouches.length === 1) {\r\n    targetIds[allTouches[0].identifier] = true;\r\n    return [allTouches, allTouches];\r\n  }\r\n\r\n  let i;\r\n  let targetTouches;\r\n  let changedTouches = toArray(ev.changedTouches);\r\n  let changedTargetTouches = [];\r\n  let { target } = this;\r\n\r\n  // get target touches from touches\r\n  targetTouches = allTouches.filter((touch) => {\r\n    return hasParent(touch.target, target);\r\n  });\r\n\r\n  // collect touches\r\n  if (type === INPUT_START) {\r\n    i = 0;\r\n    while (i < targetTouches.length) {\r\n      targetIds[targetTouches[i].identifier] = true;\r\n      i++;\r\n    }\r\n  }\r\n\r\n  // filter changed touches to only contain touches that exist in the collected target ids\r\n  i = 0;\r\n  while (i < changedTouches.length) {\r\n    if (targetIds[changedTouches[i].identifier]) {\r\n      changedTargetTouches.push(changedTouches[i]);\r\n    }\r\n\r\n    // cleanup removed touches\r\n    if (type & (INPUT_END | INPUT_CANCEL)) {\r\n      delete targetIds[changedTouches[i].identifier];\r\n    }\r\n    i++;\r\n  }\r\n\r\n  if (!changedTargetTouches.length) {\r\n    return;\r\n  }\r\n\r\n  return [\r\n    // merge targetTouches with changedTargetTouches so it contains ALL touches, including 'end' and 'cancel'\r\n    uniqueArray(targetTouches.concat(changedTargetTouches), 'identifier', true),\r\n    changedTargetTouches\r\n  ];\r\n}\r\n","import {\r\n    INPUT_START,\r\n    INPUT_MOVE,\r\n    INPUT_END,\r\n    INPUT_TYPE_MOUSE\r\n} from '../inputjs/input-consts';\r\nimport Input from '../inputjs/input-constructor';\r\n\r\nconst MOUSE_INPUT_MAP = {\r\n  mousedown: INPUT_START,\r\n  mousemove: INPUT_MOVE,\r\n  mouseup: INPUT_END\r\n};\r\n\r\nconst MOUSE_ELEMENT_EVENTS = 'mousedown';\r\nconst MOUSE_WINDOW_EVENTS = 'mousemove mouseup';\r\n\r\n/**\r\n * @private\r\n * Mouse events input\r\n * @constructor\r\n * @extends Input\r\n */\r\nexport default class MouseInput extends Input {\r\n  constructor() {\r\n    var proto = MouseInput.prototype;\r\n    proto.evEl = MOUSE_ELEMENT_EVENTS;\r\n    proto.evWin = MOUSE_WINDOW_EVENTS;\r\n\r\n    super(...arguments);\r\n    this.pressed = false; // mousedown state\r\n  }\r\n\r\n  /**\r\n   * @private\r\n   * handle mouse events\r\n   * @param {Object} ev\r\n   */\r\n  handler(ev) {\r\n    let eventType = MOUSE_INPUT_MAP[ev.type];\r\n\r\n    // on start we want to have the left mouse button down\r\n    if (eventType & INPUT_START && ev.button === 0) {\r\n      this.pressed = true;\r\n    }\r\n\r\n    if (eventType & INPUT_MOVE && ev.which !== 1) {\r\n      eventType = INPUT_END;\r\n    }\r\n\r\n    // mouse must be down\r\n    if (!this.pressed) {\r\n      return;\r\n    }\r\n\r\n    if (eventType & INPUT_END) {\r\n      this.pressed = false;\r\n    }\r\n\r\n    this.callback(this.manager, eventType, {\r\n      pointers: [ev],\r\n      changedPointers: [ev],\r\n      pointerType: INPUT_TYPE_MOUSE,\r\n      srcEvent: ev\r\n    });\r\n  }\r\n}\r\n","import Input from \"../inputjs/input-constructor\";\r\nimport TouchInput from \"./touch\";\r\nimport MouseInput from \"./mouse\";\r\nimport {\r\n\tINPUT_START,\r\n\tINPUT_END,\r\n\tINPUT_CANCEL,\r\n\tINPUT_TYPE_TOUCH,\r\n\tINPUT_TYPE_MOUSE,\r\n} from \"../inputjs/input-consts\";\r\n\r\n/**\r\n * @private\r\n * Combined touch and mouse input\r\n *\r\n * Touch has a higher priority then mouse, and while touching no mouse events are allowed.\r\n * This because touch devices also emit mouse events while doing a touch.\r\n *\r\n * @constructor\r\n * @extends Input\r\n */\r\n\r\nconst DEDUP_TIMEOUT = 2500;\r\nconst DEDUP_DISTANCE = 25;\r\n\r\nfunction setLastTouch(eventData) {\r\n\tconst { changedPointers: [touch] } = eventData;\r\n\r\n\tif (touch.identifier === this.primaryTouch) {\r\n\t\tconst lastTouch = { x: touch.clientX, y: touch.clientY };\r\n\t\tconst lts = this.lastTouches;\r\n\r\n\t\tthis.lastTouches.push(lastTouch);\r\n\r\n\r\n\t\tconst removeLastTouch = function() {\r\n\t\t\tconst i = lts.indexOf(lastTouch);\r\n\r\n\t\t\tif (i > -1) {\r\n\t\t\t\tlts.splice(i, 1);\r\n\t\t\t}\r\n\t\t};\r\n\r\n\t\tsetTimeout(removeLastTouch, DEDUP_TIMEOUT);\r\n\t}\r\n}\r\n\r\n\r\nfunction recordTouches(eventType, eventData) {\r\n\tif (eventType & INPUT_START) {\r\n\t\tthis.primaryTouch = eventData.changedPointers[0].identifier;\r\n\t\tsetLastTouch.call(this, eventData);\r\n\t} else if (eventType & (INPUT_END | INPUT_CANCEL)) {\r\n\t\tsetLastTouch.call(this, eventData);\r\n\t}\r\n}\r\nfunction isSyntheticEvent(eventData) {\r\n\tconst x = eventData.srcEvent.clientX;\r\n\tconst y = eventData.srcEvent.clientY;\r\n\r\n\tfor (let i = 0; i < this.lastTouches.length; i++) {\r\n\t\tconst t = this.lastTouches[i];\r\n\t\tconst dx = Math.abs(x - t.x);\r\n\t\tconst dy = Math.abs(y - t.y);\r\n\r\n\t\tif (dx <= DEDUP_DISTANCE && dy <= DEDUP_DISTANCE) {\r\n\t\t\treturn true;\r\n\t\t}\r\n\t}\r\n\treturn false;\r\n}\r\n\r\n\r\nexport default class TouchMouseInput extends Input {\r\n\tconstructor(manager, callback) {\r\n\t\tsuper(manager, callback);\r\n\r\n\t\tthis.touch = new TouchInput(this.manager, this.handler);\r\n\t\tthis.mouse = new MouseInput(this.manager, this.handler);\r\n\t\tthis.primaryTouch = null;\r\n\t\tthis.lastTouches = [];\r\n\t}\r\n\r\n\t/**\r\n\t * @private\r\n\t * handle mouse and touch events\r\n\t * @param {Hammer} manager\r\n\t * @param {String} inputEvent\r\n\t * @param {Object} inputData\r\n\t */\r\n\thandler = (manager, inputEvent, inputData) => {\r\n\t\tconst isTouch = (inputData.pointerType === INPUT_TYPE_TOUCH);\r\n\t\tconst isMouse = (inputData.pointerType === INPUT_TYPE_MOUSE);\r\n\r\n\t\tif (isMouse && inputData.sourceCapabilities && inputData.sourceCapabilities.firesTouchEvents) {\r\n\t\t\treturn;\r\n\t\t}\r\n\r\n\t\t// when we're in a touch event, record touches to  de-dupe synthetic mouse event\r\n\t\tif (isTouch) {\r\n\t\t\trecordTouches.call(this, inputEvent, inputData);\r\n\t\t} else if (isMouse && isSyntheticEvent.call(this, inputData)) {\r\n\t\t\treturn;\r\n\t\t}\r\n\r\n\t\tthis.callback(manager, inputEvent, inputData);\r\n\t}\r\n\r\n\t/**\r\n\t * @private\r\n\t * remove the event listeners\r\n\t */\r\n\tdestroy() {\r\n\t\tthis.touch.destroy();\r\n\t\tthis.mouse.destroy();\r\n\t}\r\n}\r\n","import { SUPPORT_POINTER_EVENTS,SUPPORT_ONLY_TOUCH,SUPPORT_TOUCH } from './input-consts';\r\nimport inputHandler from './input-handler';\r\nimport PointerEventInput from '../input/pointerevent';\r\nimport TouchInput from '../input/touch';\r\nimport MouseInput from '../input/mouse';\r\nimport TouchMouseInput from '../input/touchmouse';\r\n\r\n/**\r\n * @private\r\n * create new input type manager\r\n * called by the Manager constructor\r\n * @param {Hammer} manager\r\n * @returns {Input}\r\n */\r\nexport default function createInputInstance(manager) {\r\n  let Type;\r\n  // let inputClass = manager.options.inputClass;\r\n  let { options:{ inputClass } } = manager;\r\n  if (inputClass) {\r\n    Type = inputClass;\r\n  } else if (SUPPORT_POINTER_EVENTS) {\r\n    Type = PointerEventInput;\r\n  } else if (SUPPORT_ONLY_TOUCH) {\r\n    Type = TouchInput;\r\n  } else if (!SUPPORT_TOUCH) {\r\n    Type = MouseInput;\r\n  } else {\r\n    Type = TouchMouseInput;\r\n  }\r\n  return new (Type)(manager, inputHandler);\r\n}\r\n","import each from './each';\r\n/**\r\n * @private\r\n * if the argument is an array, we want to execute the fn on each entry\r\n * if it aint an array we don't want to do a thing.\r\n * this is used by all the methods that accept a single and array argument.\r\n * @param {*|Array} arg\r\n * @param {String} fn\r\n * @param {Object} [context]\r\n * @returns {Boolean}\r\n */\r\nexport default function invokeArrayArg(arg, fn, context) {\r\n  if (Array.isArray(arg)) {\r\n    each(arg, context[fn], context);\r\n    return true;\r\n  }\r\n  return false;\r\n}\r\n","const STATE_POSSIBLE = 1;\r\nconst STATE_BEGAN = 2;\r\nconst STATE_CHANGED = 4;\r\nconst STATE_ENDED = 8;\r\nconst STATE_RECOGNIZED = STATE_ENDED;\r\nconst STATE_CANCELLED = 16;\r\nconst STATE_FAILED = 32;\r\n\r\nexport {\r\n    STATE_POSSIBLE,\r\n    STATE_BEGAN,\r\n    STATE_CHANGED,\r\n    STATE_ENDED,\r\n    STATE_RECOGNIZED,\r\n    STATE_CANCELLED,\r\n    STATE_FAILED\r\n};\r\n","/**\r\n * @private\r\n * get a unique id\r\n * @returns {number} uniqueId\r\n */\r\nlet _uniqueId = 1;\r\nexport default function uniqueId() {\r\n  return _uniqueId++;\r\n}\r\n","/**\r\n * @private\r\n * get a recognizer by name if it is bound to a manager\r\n * @param {Recognizer|String} otherRecognizer\r\n * @param {Recognizer} recognizer\r\n * @returns {Recognizer}\r\n */\r\nexport default function getRecognizerByNameIfManager(otherRecognizer, recognizer) {\r\n  let { manager } = recognizer;\r\n  if (manager) {\r\n    return manager.get(otherRecognizer);\r\n  }\r\n  return otherRecognizer;\r\n}\r\n","import {\r\n    STATE_CANCELLED,\r\n    STATE_ENDED,\r\n    STATE_CHANGED,\r\n    STATE_BEGAN\r\n} from './recognizer-consts';\r\n\r\n/**\r\n * @private\r\n * get a usable string, used as event postfix\r\n * @param {constant} state\r\n * @returns {String} state\r\n */\r\nexport default function stateStr(state) {\r\n  if (state & STATE_CANCELLED) {\r\n    return 'cancel';\r\n  } else if (state & STATE_ENDED) {\r\n    return 'end';\r\n  } else if (state & STATE_CHANGED) {\r\n    return 'move';\r\n  } else if (state & STATE_BEGAN) {\r\n    return 'start';\r\n  }\r\n  return '';\r\n}\r\n","import {\r\n    STATE_POSSIBLE,\r\n    STATE_ENDED,\r\n    STATE_FAILED,\r\n    STATE_RECOGNIZED,\r\n    STATE_CANCELLED,\r\n    STATE_BEGAN,\r\n    STATE_CHANGED\r\n} from './recognizer-consts';\r\nimport assign from '../utils/assign';\r\nimport uniqueId from '../utils/unique-id';\r\nimport invokeArrayArg from '../utils/invoke-array-arg';\r\nimport inArray from '../utils/in-array';\r\nimport boolOrFn from '../utils/bool-or-fn';\r\nimport getRecognizerByNameIfManager from './get-recognizer-by-name-if-manager';\r\nimport stateStr from './state-str';\r\n\r\n/**\r\n * @private\r\n * Recognizer flow explained; *\r\n * All recognizers have the initial state of POSSIBLE when a input session starts.\r\n * The definition of a input session is from the first input until the last input, with all it's movement in it. *\r\n * Example session for mouse-input: mousedown -> mousemove -> mouseup\r\n *\r\n * On each recognizing cycle (see Manager.recognize) the .recognize() method is executed\r\n * which determines with state it should be.\r\n *\r\n * If the recognizer has the state FAILED, CANCELLED or RECOGNIZED (equals ENDED), it is reset to\r\n * POSSIBLE to give it another change on the next cycle.\r\n *\r\n *               Possible\r\n *                  |\r\n *            +-----+---------------+\r\n *            |                     |\r\n *      +-----+-----+               |\r\n *      |           |               |\r\n *   Failed      Cancelled          |\r\n *                          +-------+------+\r\n *                          |              |\r\n *                      Recognized       Began\r\n *                                         |\r\n *                                      Changed\r\n *                                         |\r\n *                                  Ended/Recognized\r\n */\r\n\r\n/**\r\n * @private\r\n * Recognizer\r\n * Every recognizer needs to extend from this class.\r\n * @constructor\r\n * @param {Object} options\r\n */\r\nexport default class Recognizer {\r\n  constructor(options = {}) {\r\n    this.options = {\r\n      enable: true,\r\n      ...options,\r\n    };\r\n\r\n    this.id = uniqueId();\r\n\r\n    this.manager = null;\r\n\r\n    // default is enable true\r\n    this.state = STATE_POSSIBLE;\r\n    this.simultaneous = {};\r\n    this.requireFail = [];\r\n  }\r\n\r\n  /**\r\n   * @private\r\n   * set options\r\n   * @param {Object} options\r\n   * @return {Recognizer}\r\n   */\r\n  set(options) {\r\n    assign(this.options, options);\r\n\r\n    // also update the touchAction, in case something changed about the directions/enabled state\r\n    this.manager && this.manager.touchAction.update();\r\n    return this;\r\n  }\r\n\r\n  /**\r\n   * @private\r\n   * recognize simultaneous with an other recognizer.\r\n   * @param {Recognizer} otherRecognizer\r\n   * @returns {Recognizer} this\r\n   */\r\n  recognizeWith(otherRecognizer) {\r\n    if (invokeArrayArg(otherRecognizer, 'recognizeWith', this)) {\r\n      return this;\r\n    }\r\n\r\n    let { simultaneous } = this;\r\n    otherRecognizer = getRecognizerByNameIfManager(otherRecognizer, this);\r\n    if (!simultaneous[otherRecognizer.id]) {\r\n      simultaneous[otherRecognizer.id] = otherRecognizer;\r\n      otherRecognizer.recognizeWith(this);\r\n    }\r\n    return this;\r\n  }\r\n\r\n  /**\r\n   * @private\r\n   * drop the simultaneous link. it doesnt remove the link on the other recognizer.\r\n   * @param {Recognizer} otherRecognizer\r\n   * @returns {Recognizer} this\r\n   */\r\n  dropRecognizeWith(otherRecognizer) {\r\n    if (invokeArrayArg(otherRecognizer, 'dropRecognizeWith', this)) {\r\n      return this;\r\n    }\r\n\r\n    otherRecognizer = getRecognizerByNameIfManager(otherRecognizer, this);\r\n    delete this.simultaneous[otherRecognizer.id];\r\n    return this;\r\n  }\r\n\r\n  /**\r\n   * @private\r\n   * recognizer can only run when an other is failing\r\n   * @param {Recognizer} otherRecognizer\r\n   * @returns {Recognizer} this\r\n   */\r\n  requireFailure(otherRecognizer) {\r\n    if (invokeArrayArg(otherRecognizer, 'requireFailure', this)) {\r\n      return this;\r\n    }\r\n\r\n    let { requireFail } = this;\r\n    otherRecognizer = getRecognizerByNameIfManager(otherRecognizer, this);\r\n    if (inArray(requireFail, otherRecognizer) === -1) {\r\n      requireFail.push(otherRecognizer);\r\n      otherRecognizer.requireFailure(this);\r\n    }\r\n    return this;\r\n  }\r\n\r\n  /**\r\n   * @private\r\n   * drop the requireFailure link. it does not remove the link on the other recognizer.\r\n   * @param {Recognizer} otherRecognizer\r\n   * @returns {Recognizer} this\r\n   */\r\n  dropRequireFailure(otherRecognizer) {\r\n    if (invokeArrayArg(otherRecognizer, 'dropRequireFailure', this)) {\r\n      return this;\r\n    }\r\n\r\n    otherRecognizer = getRecognizerByNameIfManager(otherRecognizer, this);\r\n    let index = inArray(this.requireFail, otherRecognizer);\r\n    if (index > -1) {\r\n      this.requireFail.splice(index, 1);\r\n    }\r\n    return this;\r\n  }\r\n\r\n  /**\r\n   * @private\r\n   * has require failures boolean\r\n   * @returns {boolean}\r\n   */\r\n  hasRequireFailures() {\r\n    return this.requireFail.length > 0;\r\n  }\r\n\r\n  /**\r\n   * @private\r\n   * if the recognizer can recognize simultaneous with an other recognizer\r\n   * @param {Recognizer} otherRecognizer\r\n   * @returns {Boolean}\r\n   */\r\n  canRecognizeWith(otherRecognizer) {\r\n    return !!this.simultaneous[otherRecognizer.id];\r\n  }\r\n\r\n  /**\r\n   * @private\r\n   * You should use `tryEmit` instead of `emit` directly to check\r\n   * that all the needed recognizers has failed before emitting.\r\n   * @param {Object} input\r\n   */\r\n  emit(input) {\r\n    let self = this;\r\n    let { state } = this;\r\n\r\n    function emit(event) {\r\n      self.manager.emit(event, input);\r\n    }\r\n\r\n    // 'panstart' and 'panmove'\r\n    if (state < STATE_ENDED) {\r\n      emit(self.options.event + stateStr(state));\r\n    }\r\n\r\n    emit(self.options.event); // simple 'eventName' events\r\n\r\n    if (input.additionalEvent) { // additional event(panleft, panright, pinchin, pinchout...)\r\n      emit(input.additionalEvent);\r\n    }\r\n\r\n    // panend and pancancel\r\n    if (state >= STATE_ENDED) {\r\n      emit(self.options.event + stateStr(state));\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @private\r\n   * Check that all the require failure recognizers has failed,\r\n   * if true, it emits a gesture event,\r\n   * otherwise, setup the state to FAILED.\r\n   * @param {Object} input\r\n   */\r\n  tryEmit(input) {\r\n    if (this.canEmit()) {\r\n      return this.emit(input);\r\n    }\r\n    // it's failing anyway\r\n    this.state = STATE_FAILED;\r\n  }\r\n\r\n  /**\r\n   * @private\r\n   * can we emit?\r\n   * @returns {boolean}\r\n   */\r\n  canEmit() {\r\n    let i = 0;\r\n    while (i < this.requireFail.length) {\r\n      if (!(this.requireFail[i].state & (STATE_FAILED | STATE_POSSIBLE))) {\r\n        return false;\r\n      }\r\n      i++;\r\n    }\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * @private\r\n   * update the recognizer\r\n   * @param {Object} inputData\r\n   */\r\n  recognize(inputData) {\r\n    // make a new copy of the inputData\r\n    // so we can change the inputData without messing up the other recognizers\r\n    let inputDataClone = assign({}, inputData);\r\n\r\n    // is is enabled and allow recognizing?\r\n    if (!boolOrFn(this.options.enable, [this, inputDataClone])) {\r\n      this.reset();\r\n      this.state = STATE_FAILED;\r\n      return;\r\n    }\r\n\r\n    // reset when we've reached the end\r\n    if (this.state & (STATE_RECOGNIZED | STATE_CANCELLED | STATE_FAILED)) {\r\n      this.state = STATE_POSSIBLE;\r\n    }\r\n\r\n    this.state = this.process(inputDataClone);\r\n\r\n    // the recognizer has recognized a gesture\r\n    // so trigger an event\r\n    if (this.state & (STATE_BEGAN | STATE_CHANGED | STATE_ENDED | STATE_CANCELLED)) {\r\n      this.tryEmit(inputDataClone);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @private\r\n   * return the state of the recognizer\r\n   * the actual recognizing happens in this method\r\n   * @virtual\r\n   * @param {Object} inputData\r\n   * @returns {constant} STATE\r\n   */\r\n\r\n  /* jshint ignore:start */\r\n  process(inputData) { }\r\n  /* jshint ignore:end */\r\n\r\n  /**\r\n   * @private\r\n   * return the preferred touch-action\r\n   * @virtual\r\n   * @returns {Array}\r\n   */\r\n  getTouchAction() { }\r\n\r\n  /**\r\n   * @private\r\n   * called when the gesture isn't allowed to recognize\r\n   * like when another is being recognized or it is disabled\r\n   * @virtual\r\n   */\r\n  reset() { }\r\n}","import Recognizer from '../recognizerjs/recognizer-constructor';\r\nimport { TOUCH_ACTION_MANIPULATION } from '../touchactionjs/touchaction-Consts';\r\nimport {INPUT_START,INPUT_END } from '../inputjs/input-consts';\r\nimport {\r\n    STATE_RECOGNIZED,\r\n    STATE_BEGAN,\r\n    STATE_FAILED\r\n} from '../recognizerjs/recognizer-consts';\r\nimport getDistance from '../inputjs/get-distance';\r\n\r\n/**\r\n * @private\r\n * A tap is recognized when the pointer is doing a small tap/click. Multiple taps are recognized if they occur\r\n * between the given interval and position. The delay option can be used to recognize multi-taps without firing\r\n * a single tap.\r\n *\r\n * The eventData from the emitted event contains the property `tapCount`, which contains the amount of\r\n * multi-taps being recognized.\r\n * @constructor\r\n * @extends Recognizer\r\n */\r\nexport default class TapRecognizer extends Recognizer {\r\n  constructor(options = {}) {\r\n    super({\r\n      event: 'tap',\r\n      pointers: 1,\r\n      taps: 1,\r\n      interval: 300, // max time between the multi-tap taps\r\n      time: 250, // max time of the pointer to be down (like finger on the screen)\r\n      threshold: 9, // a minimal movement is ok, but keep it low\r\n      posThreshold: 10, // a multi-tap can be a bit off the initial position\r\n      ...options,\r\n    });\r\n\r\n    // previous time and center,\r\n    // used for tap counting\r\n    this.pTime = false;\r\n    this.pCenter = false;\r\n\r\n    this._timer = null;\r\n    this._input = null;\r\n    this.count = 0;\r\n  }\r\n\r\n  getTouchAction() {\r\n    return [TOUCH_ACTION_MANIPULATION];\r\n  }\r\n\r\n  process(input) {\r\n    let { options } = this;\r\n\r\n    let validPointers = input.pointers.length === options.pointers;\r\n    let validMovement = input.distance < options.threshold;\r\n    let validTouchTime = input.deltaTime < options.time;\r\n\r\n    this.reset();\r\n\r\n    if ((input.eventType & INPUT_START) && (this.count === 0)) {\r\n      return this.failTimeout();\r\n    }\r\n\r\n    // we only allow little movement\r\n    // and we've reached an end event, so a tap is possible\r\n    if (validMovement && validTouchTime && validPointers) {\r\n      if (input.eventType !== INPUT_END) {\r\n        return this.failTimeout();\r\n      }\r\n\r\n      let validInterval = this.pTime ? (input.timeStamp - this.pTime < options.interval) : true;\r\n      let validMultiTap = !this.pCenter || getDistance(this.pCenter, input.center) < options.posThreshold;\r\n\r\n      this.pTime = input.timeStamp;\r\n      this.pCenter = input.center;\r\n\r\n      if (!validMultiTap || !validInterval) {\r\n        this.count = 1;\r\n      } else {\r\n        this.count += 1;\r\n      }\r\n\r\n      this._input = input;\r\n\r\n      // if tap count matches we have recognized it,\r\n      // else it has began recognizing...\r\n      let tapCount = this.count % options.taps;\r\n      if (tapCount === 0) {\r\n        // no failing requirements, immediately trigger the tap event\r\n        // or wait as long as the multitap interval to trigger\r\n        if (!this.hasRequireFailures()) {\r\n          return STATE_RECOGNIZED;\r\n        } else {\r\n          this._timer = setTimeout(() => {\r\n            this.state = STATE_RECOGNIZED;\r\n            this.tryEmit();\r\n          }, options.interval);\r\n          return STATE_BEGAN;\r\n        }\r\n      }\r\n    }\r\n    return STATE_FAILED;\r\n  }\r\n\r\n  failTimeout() {\r\n    this._timer = setTimeout(() => {\r\n      this.state = STATE_FAILED;\r\n    }, this.options.interval);\r\n    return STATE_FAILED;\r\n  }\r\n\r\n  reset() {\r\n    clearTimeout(this._timer);\r\n  }\r\n\r\n  emit() {\r\n    if (this.state === STATE_RECOGNIZED) {\r\n      this._input.tapCount = this.count;\r\n      this.manager.emit(this.options.event, this._input);\r\n    }\r\n  }\r\n}\r\n","import Recognizer from '../recognizerjs/recognizer-constructor';\r\nimport {\r\n    STATE_BEGAN,\r\n    STATE_CHANGED,\r\n    STATE_CANCELLED,\r\n    STATE_ENDED,\r\n    STATE_FAILED\r\n} from '../recognizerjs/recognizer-consts';\r\nimport {\r\n    INPUT_CANCEL,\r\n    INPUT_END\r\n} from '../inputjs/input-consts';\r\n\r\n/**\r\n * @private\r\n * This recognizer is just used as a base for the simple attribute recognizers.\r\n * @constructor\r\n * @extends Recognizer\r\n */\r\nexport default class AttrRecognizer extends Recognizer {\r\n  constructor(options = {}) {\r\n    super({\r\n      pointers: 1,\r\n      ...options,\r\n    });\r\n  }\r\n\r\n  /**\r\n   * @private\r\n   * Used to check if it the recognizer receives valid input, like input.distance > 10.\r\n   * @memberof AttrRecognizer\r\n   * @param {Object} input\r\n   * @returns {Boolean} recognized\r\n   */\r\n  attrTest(input) {\r\n    let optionPointers = this.options.pointers;\r\n    return optionPointers === 0 || input.pointers.length === optionPointers;\r\n  }\r\n\r\n  /**\r\n   * @private\r\n   * Process the input and return the state for the recognizer\r\n   * @memberof AttrRecognizer\r\n   * @param {Object} input\r\n   * @returns {*} State\r\n   */\r\n  process(input) {\r\n    let { state } = this;\r\n    let { eventType } = input;\r\n\r\n    let isRecognized = state & (STATE_BEGAN | STATE_CHANGED);\r\n    let isValid = this.attrTest(input);\r\n\r\n    // on cancel input and we've recognized before, return STATE_CANCELLED\r\n    if (isRecognized && (eventType & INPUT_CANCEL || !isValid)) {\r\n      return state | STATE_CANCELLED;\r\n    } else if (isRecognized || isValid) {\r\n      if (eventType & INPUT_END) {\r\n        return state | STATE_ENDED;\r\n      } else if (!(state & STATE_BEGAN)) {\r\n        return STATE_BEGAN;\r\n      }\r\n      return state | STATE_CHANGED;\r\n    }\r\n    return STATE_FAILED;\r\n  }\r\n}\r\n","import {\r\n    DIRECTION_LEFT,\r\n    DIRECTION_RIGHT,\r\n    DIRECTION_UP,\r\n    DIRECTION_DOWN\r\n} from '../inputjs/input-consts';\r\n\r\n/**\r\n * @private\r\n * direction cons to string\r\n * @param {constant} direction\r\n * @returns {String}\r\n */\r\nexport default function directionStr(direction) {\r\n  if (direction === DIRECTION_DOWN) {\r\n    return 'down';\r\n  } else if (direction === DIRECTION_UP) {\r\n    return 'up';\r\n  } else if (direction === DIRECTION_LEFT) {\r\n    return 'left';\r\n  } else if (direction === DIRECTION_RIGHT) {\r\n    return 'right';\r\n  }\r\n  return '';\r\n}\r\n","import  AttrRecognizer from './attribute';\r\nimport {\r\n    DIRECTION_ALL,\r\n    DIRECTION_HORIZONTAL,\r\n    DIRECTION_VERTICAL,\r\n    DIRECTION_NONE,\r\n    DIRECTION_UP,\r\n    DIRECTION_DOWN,\r\n    DIRECTION_LEFT,\r\n    DIRECTION_RIGHT\r\n} from '../inputjs/input-consts';\r\nimport { STATE_BEGAN } from '../recognizerjs/recognizer-consts';\r\nimport { TOUCH_ACTION_PAN_X,TOUCH_ACTION_PAN_Y } from '../touchactionjs/touchaction-Consts';\r\nimport directionStr from '../recognizerjs/direction-str';\r\n\r\n/**\r\n * @private\r\n * Pan\r\n * Recognized when the pointer is down and moved in the allowed direction.\r\n * @constructor\r\n * @extends AttrRecognizer\r\n */\r\nexport default class PanRecognizer extends AttrRecognizer {\r\n  constructor(options = {}) {\r\n    super({\r\n      event: 'pan',\r\n      threshold: 10,\r\n      pointers: 1,\r\n      direction: DIRECTION_ALL,\r\n      ...options,\r\n    });\r\n    this.pX = null;\r\n    this.pY = null;\r\n  }\r\n\r\n  getTouchAction() {\r\n    let { options:{ direction } } = this;\r\n    let actions = [];\r\n    if (direction & DIRECTION_HORIZONTAL) {\r\n      actions.push(TOUCH_ACTION_PAN_Y);\r\n    }\r\n    if (direction & DIRECTION_VERTICAL) {\r\n      actions.push(TOUCH_ACTION_PAN_X);\r\n    }\r\n    return actions;\r\n  }\r\n\r\n  directionTest(input) {\r\n    let { options } = this;\r\n    let hasMoved = true;\r\n    let { distance } = input;\r\n    let { direction } = input;\r\n    let x = input.deltaX;\r\n    let y = input.deltaY;\r\n\r\n    // lock to axis?\r\n    if (!(direction & options.direction)) {\r\n      if (options.direction & DIRECTION_HORIZONTAL) {\r\n        direction = (x === 0) ? DIRECTION_NONE : (x < 0) ? DIRECTION_LEFT : DIRECTION_RIGHT;\r\n        hasMoved = x !== this.pX;\r\n        distance = Math.abs(input.deltaX);\r\n      } else {\r\n        direction = (y === 0) ? DIRECTION_NONE : (y < 0) ? DIRECTION_UP : DIRECTION_DOWN;\r\n        hasMoved = y !== this.pY;\r\n        distance = Math.abs(input.deltaY);\r\n      }\r\n    }\r\n    input.direction = direction;\r\n    return hasMoved && distance > options.threshold && direction & options.direction;\r\n  }\r\n\r\n  attrTest(input) {\r\n    return AttrRecognizer.prototype.attrTest.call(this, input) && // replace with a super call\r\n        (this.state & STATE_BEGAN || (!(this.state & STATE_BEGAN) && this.directionTest(input)));\r\n  }\r\n\r\n  emit(input) {\r\n\r\n    this.pX = input.deltaX;\r\n    this.pY = input.deltaY;\r\n\r\n    let direction = directionStr(input.direction);\r\n\r\n    if (direction) {\r\n      input.additionalEvent = this.options.event + direction;\r\n    }\r\n    super.emit(input);\r\n  }\r\n}\r\n","import AttrRecognizer from '../recognizers/attribute';\r\nimport { abs } from '../utils/utils-consts';\r\nimport { DIRECTION_HORIZONTAL,DIRECTION_VERTICAL } from '../inputjs/input-consts';\r\nimport PanRecognizer from './pan';\r\nimport { INPUT_END } from '../inputjs/input-consts';\r\nimport directionStr from '../recognizerjs/direction-str';\r\n\r\n/**\r\n * @private\r\n * Swipe\r\n * Recognized when the pointer is moving fast (velocity), with enough distance in the allowed direction.\r\n * @constructor\r\n * @extends AttrRecognizer\r\n */\r\nexport default class SwipeRecognizer extends AttrRecognizer {\r\n  constructor(options = {}) {\r\n    super({\r\n      event: 'swipe',\r\n      threshold: 10,\r\n      velocity: 0.3,\r\n      direction: DIRECTION_HORIZONTAL | DIRECTION_VERTICAL,\r\n      pointers: 1,\r\n      ...options,\r\n    });\r\n  }\r\n\r\n  getTouchAction() {\r\n    return PanRecognizer.prototype.getTouchAction.call(this);\r\n  }\r\n\r\n  attrTest(input) {\r\n    let { direction } = this.options;\r\n    let velocity;\r\n\r\n    if (direction & (DIRECTION_HORIZONTAL | DIRECTION_VERTICAL)) {\r\n      velocity = input.overallVelocity;\r\n    } else if (direction & DIRECTION_HORIZONTAL) {\r\n      velocity = input.overallVelocityX;\r\n    } else if (direction & DIRECTION_VERTICAL) {\r\n      velocity = input.overallVelocityY;\r\n    }\r\n\r\n    return super.attrTest(input) &&\r\n        direction & input.offsetDirection &&\r\n        input.distance > this.options.threshold &&\r\n        input.maxPointers === this.options.pointers &&\r\n        abs(velocity) > this.options.velocity && input.eventType & INPUT_END;\r\n  }\r\n\r\n  emit(input) {\r\n    let direction = directionStr(input.offsetDirection);\r\n    if (direction) {\r\n      this.manager.emit(this.options.event + direction, input);\r\n    }\r\n\r\n    this.manager.emit(this.options.event, input);\r\n  }\r\n}\r\n","import AttrRecognizer from './attribute';\r\nimport { TOUCH_ACTION_NONE } from '../touchactionjs/touchaction-Consts';\r\nimport { STATE_BEGAN } from '../recognizerjs/recognizer-consts';\r\n\r\n/**\r\n * @private\r\n * Pinch\r\n * Recognized when two or more pointers are moving toward (zoom-in) or away from each other (zoom-out).\r\n * @constructor\r\n * @extends AttrRecognizer\r\n */\r\nexport default class PinchRecognizer extends AttrRecognizer {\r\n  constructor(options = {}) {\r\n    super({\r\n      event: 'pinch',\r\n      threshold: 0,\r\n      pointers: 2,\r\n      ...options,\r\n    });\r\n  }\r\n\r\n  getTouchAction() {\r\n    return [TOUCH_ACTION_NONE];\r\n  }\r\n\r\n  attrTest(input) {\r\n    return super.attrTest(input) &&\r\n        (Math.abs(input.scale - 1) > this.options.threshold || this.state & STATE_BEGAN);\r\n  }\r\n\r\n  emit(input) {\r\n    if (input.scale !== 1) {\r\n      let inOut = input.scale < 1 ? 'in' : 'out';\r\n      input.additionalEvent = this.options.event + inOut;\r\n    }\r\n    super.emit(input);\r\n  }\r\n}\r\n","import AttrRecognizer from './attribute';\r\nimport { TOUCH_ACTION_NONE } from '../touchactionjs/touchaction-Consts';\r\nimport { STATE_BEGAN } from '../recognizerjs/recognizer-consts';\r\n\r\n/**\r\n * @private\r\n * Rotate\r\n * Recognized when two or more pointer are moving in a circular motion.\r\n * @constructor\r\n * @extends AttrRecognizer\r\n */\r\nexport default class RotateRecognizer extends AttrRecognizer {\r\n  constructor(options = {}) {\r\n    super( {\r\n      event: 'rotate',\r\n      threshold: 0,\r\n      pointers: 2,\r\n      ...options,\r\n    });\r\n  }\r\n\r\n  getTouchAction() {\r\n    return [TOUCH_ACTION_NONE];\r\n  }\r\n\r\n  attrTest(input) {\r\n    return super.attrTest(input) &&\r\n        (Math.abs(input.rotation) > this.options.threshold || this.state & STATE_BEGAN);\r\n  }\r\n}","import Recognizer from '../recognizerjs/recognizer-constructor';\r\nimport {\r\n    STATE_RECOGNIZED,\r\n    STATE_FAILED\r\n} from '../recognizerjs/recognizer-consts';\r\nimport { now } from '../utils/utils-consts';\r\nimport { TOUCH_ACTION_AUTO } from '../touchactionjs/touchaction-Consts';\r\nimport {\r\n    INPUT_START,\r\n    INPUT_END,\r\n    INPUT_CANCEL\r\n} from '../inputjs/input-consts';\r\n\r\n/**\r\n * @private\r\n * Press\r\n * Recognized when the pointer is down for x ms without any movement.\r\n * @constructor\r\n * @extends Recognizer\r\n */\r\nexport default class PressRecognizer extends Recognizer {\r\n  constructor(options = {}) {\r\n    super({\r\n      event: 'press',\r\n      pointers: 1,\r\n      time: 251, // minimal time of the pointer to be pressed\r\n      threshold: 9, // a minimal movement is ok, but keep it low\r\n      ...options,\r\n    });\r\n    this._timer = null;\r\n    this._input = null;\r\n  }\r\n\r\n  getTouchAction() {\r\n    return [TOUCH_ACTION_AUTO];\r\n  }\r\n\r\n  process(input) {\r\n    let { options } = this;\r\n    let validPointers = input.pointers.length === options.pointers;\r\n    let validMovement = input.distance < options.threshold;\r\n    let validTime = input.deltaTime > options.time;\r\n\r\n    this._input = input;\r\n\r\n    // we only allow little movement\r\n    // and we've reached an end event, so a tap is possible\r\n    if (!validMovement || !validPointers || (input.eventType & (INPUT_END | INPUT_CANCEL) && !validTime)) {\r\n      this.reset();\r\n    } else if (input.eventType & INPUT_START) {\r\n      this.reset();\r\n      this._timer = setTimeout(() => {\r\n        this.state = STATE_RECOGNIZED;\r\n        this.tryEmit();\r\n      }, options.time);\r\n    } else if (input.eventType & INPUT_END) {\r\n      return STATE_RECOGNIZED;\r\n    }\r\n    return STATE_FAILED;\r\n  }\r\n\r\n  reset() {\r\n    clearTimeout(this._timer);\r\n  }\r\n\r\n  emit(input) {\r\n    if (this.state !== STATE_RECOGNIZED) {\r\n      return;\r\n    }\r\n\r\n    if (input && (input.eventType & INPUT_END)) {\r\n      this.manager.emit(`${this.options.event}up`, input);\r\n    } else {\r\n      this._input.timeStamp = now();\r\n      this.manager.emit(this.options.event, this._input);\r\n    }\r\n  }\r\n}\r\n\r\n","import { TOUCH_ACTION_COMPUTE } from \"./touchactionjs/touchaction-Consts\";\r\nimport TapRecognizer from \"./recognizers/tap\";\r\nimport PanRecognizer from \"./recognizers/pan\";\r\nimport SwipeRecognizer from \"./recognizers/swipe\";\r\nimport PinchRecognizer from \"./recognizers/pinch\";\r\nimport RotateRecognizer from \"./recognizers/rotate\";\r\nimport PressRecognizer from \"./recognizers/press\";\r\nimport {DIRECTION_HORIZONTAL} from \"./inputjs/input-consts\";\r\n\r\nexport default {\r\n\t/**\r\n\t * @private\r\n\t * set if DOM events are being triggered.\r\n\t * But this is slower and unused by simple implementations, so disabled by default.\r\n\t * @type {Boolean}\r\n\t * @default false\r\n\t */\r\n\tdomEvents: false,\r\n\r\n\t/**\r\n\t * @private\r\n\t * The value for the touchAction property/fallback.\r\n\t * When set to `compute` it will magically set the correct value based on the added recognizers.\r\n\t * @type {String}\r\n\t * @default compute\r\n\t */\r\n\ttouchAction: TOUCH_ACTION_COMPUTE,\r\n\r\n\t/**\r\n\t * @private\r\n\t * @type {Boolean}\r\n\t * @default true\r\n\t */\r\n\tenable: true,\r\n\r\n\t/**\r\n\t * @private\r\n\t * EXPERIMENTAL FEATURE -- can be removed/changed\r\n\t * Change the parent input target element.\r\n\t * If Null, then it is being set the to main element.\r\n\t * @type {Null|EventTarget}\r\n\t * @default null\r\n\t */\r\n\tinputTarget: null,\r\n\r\n\t/**\r\n\t * @private\r\n\t * force an input class\r\n\t * @type {Null|Function}\r\n\t * @default null\r\n\t */\r\n\tinputClass: null,\r\n\r\n\t/**\r\n\t * @private\r\n\t * Some CSS properties can be used to improve the working of Hammer.\r\n\t * Add them to this method and they will be set when creating a new Manager.\r\n\t * @namespace\r\n\t */\r\n\tcssProps: {\r\n\t\t/**\r\n\t\t * @private\r\n\t\t * Disables text selection to improve the dragging gesture. Mainly for desktop browsers.\r\n\t\t * @type {String}\r\n\t\t * @default 'none'\r\n\t\t */\r\n\t\tuserSelect: \"none\",\r\n\r\n\t\t/**\r\n\t\t * @private\r\n\t\t * Disable the Windows Phone grippers when pressing an element.\r\n\t\t * @type {String}\r\n\t\t * @default 'none'\r\n\t\t */\r\n\t\ttouchSelect: \"none\",\r\n\r\n\t\t/**\r\n\t\t * @private\r\n\t\t * Disables the default callout shown when you touch and hold a touch target.\r\n\t\t * On iOS, when you touch and hold a touch target such as a link, Safari displays\r\n\t\t * a callout containing information about the link. This property allows you to disable that callout.\r\n\t\t * @type {String}\r\n\t\t * @default 'none'\r\n\t\t */\r\n\t\ttouchCallout: \"none\",\r\n\r\n\t\t/**\r\n\t\t * @private\r\n\t\t * Specifies whether zooming is enabled. Used by IE10>\r\n\t\t * @type {String}\r\n\t\t * @default 'none'\r\n\t\t */\r\n\t\tcontentZooming: \"none\",\r\n\r\n\t\t/**\r\n\t\t * @private\r\n\t\t * Specifies that an entire element should be draggable instead of its contents. Mainly for desktop browsers.\r\n\t\t * @type {String}\r\n\t\t * @default 'none'\r\n\t\t */\r\n\t\tuserDrag: \"none\",\r\n\r\n\t\t/**\r\n\t\t * @private\r\n\t\t * Overrides the highlight color shown when the user taps a link or a JavaScript\r\n\t\t * clickable element in iOS. This property obeys the alpha value, if specified.\r\n\t\t * @type {String}\r\n\t\t * @default 'rgba(0,0,0,0)'\r\n\t\t */\r\n\t\ttapHighlightColor: \"rgba(0,0,0,0)\",\r\n\t},\r\n};\r\n\r\n/**\r\n * @private\r\n * Default recognizer setup when calling `Hammer()`\r\n * When creating a new Manager these will be skipped.\r\n * This is separated with other defaults because of tree-shaking.\r\n * @type {Array}\r\n */\r\nexport const preset = [\r\n  [RotateRecognizer, { enable: false }],\r\n  [PinchRecognizer, { enable: false }, ['rotate']],\r\n  [SwipeRecognizer, { direction: DIRECTION_HORIZONTAL }],\r\n  [PanRecognizer, { direction: DIRECTION_HORIZONTAL }, ['swipe']],\r\n  [TapRecognizer],\r\n  [TapRecognizer, { event: 'doubletap', taps: 2 }, ['tap']],\r\n  [PressRecognizer]\r\n];\r\n","import assign from \"./utils/assign\";\r\nimport TouchAction from \"./touchactionjs/touchaction-constructor\";\r\nimport createInputInstance from \"./inputjs/create-input-instance\";\r\nimport each from \"./utils/each\";\r\nimport inArray from \"./utils/in-array\";\r\nimport invokeArrayArg from \"./utils/invoke-array-arg\";\r\nimport splitStr from \"./utils/split-str\";\r\nimport prefixed from \"./utils/prefixed\";\r\nimport Recognizer from \"./recognizerjs/recognizer-constructor\";\r\nimport {\r\n  STATE_BEGAN,\r\n  STATE_ENDED,\r\n  STATE_CHANGED,\r\n  STATE_RECOGNIZED,\r\n} from \"./recognizerjs/recognizer-consts\";\r\nimport defaults from \"./defaults\";\r\n\r\nconst STOP = 1;\r\nconst FORCED_STOP = 2;\r\n\r\n\r\n/**\r\n * @private\r\n * add/remove the css properties as defined in manager.options.cssProps\r\n * @param {Manager} manager\r\n * @param {Boolean} add\r\n */\r\nfunction toggleCssProps(manager, add) {\r\n  const { element } = manager;\r\n\r\n  if (!element.style) {\r\n    return;\r\n  }\r\n  let prop;\r\n\r\n  each(manager.options.cssProps, (value, name) => {\r\n    prop = prefixed(element.style, name);\r\n    if (add) {\r\n      manager.oldCssProps[prop] = element.style[prop];\r\n      element.style[prop] = value;\r\n    } else {\r\n      element.style[prop] = manager.oldCssProps[prop] || \"\";\r\n    }\r\n  });\r\n  if (!add) {\r\n    manager.oldCssProps = {};\r\n  }\r\n}\r\n\r\n/**\r\n * @private\r\n * trigger dom event\r\n * @param {String} event\r\n * @param {Object} data\r\n */\r\nfunction triggerDomEvent(event, data) {\r\n  const gestureEvent = document.createEvent(\"Event\");\r\n\r\n  gestureEvent.initEvent(event, true, true);\r\n  gestureEvent.gesture = data;\r\n  data.target.dispatchEvent(gestureEvent);\r\n}\r\n\r\n\r\n/**\r\n* @private\r\n * Manager\r\n * @param {HTMLElement} element\r\n * @param {Object} [options]\r\n * @constructor\r\n */\r\nexport default class Manager {\r\n  constructor(element, options) {\r\n    this.options = assign({}, defaults, options || {});\r\n\r\n    this.options.inputTarget = this.options.inputTarget || element;\r\n\r\n    this.handlers = {};\r\n    this.session = {};\r\n    this.recognizers = [];\r\n    this.oldCssProps = {};\r\n\r\n    this.element = element;\r\n    this.input = createInputInstance(this);\r\n    this.touchAction = new TouchAction(this, this.options.touchAction);\r\n\r\n    toggleCssProps(this, true);\r\n\r\n    each(this.options.recognizers, item => {\r\n      const recognizer = this.add(new (item[0])(item[1]));\r\n\r\n      item[2] && recognizer.recognizeWith(item[2]);\r\n      item[3] && recognizer.requireFailure(item[3]);\r\n    }, this);\r\n  }\r\n\r\n\t/**\r\n\t * @private\r\n\t * set options\r\n\t * @param {Object} options\r\n\t * @returns {Manager}\r\n\t */\r\n  set(options) {\r\n    assign(this.options, options);\r\n\r\n    // Options that need a little more setup\r\n    if (options.touchAction) {\r\n      this.touchAction.update();\r\n    }\r\n    if (options.inputTarget) {\r\n      // Clean up existing event listeners and reinitialize\r\n      this.input.destroy();\r\n      this.input.target = options.inputTarget;\r\n      this.input.init();\r\n    }\r\n    return this;\r\n  }\r\n\r\n\t/**\r\n\t * @private\r\n\t * stop recognizing for this session.\r\n\t * This session will be discarded, when a new [input]start event is fired.\r\n\t * When forced, the recognizer cycle is stopped immediately.\r\n\t * @param {Boolean} [force]\r\n\t */\r\n  stop(force) {\r\n    this.session.stopped = force ? FORCED_STOP : STOP;\r\n  }\r\n\r\n\t/**\r\n\t * @private\r\n\t * run the recognizers!\r\n\t * called by the inputHandler function on every movement of the pointers (touches)\r\n\t * it walks through all the recognizers and tries to detect the gesture that is being made\r\n\t * @param {Object} inputData\r\n\t */\r\n  recognize(inputData) {\r\n    const { session } = this;\r\n\r\n    if (session.stopped) {\r\n      return;\r\n    }\r\n\r\n    // run the touch-action polyfill\r\n    this.touchAction.preventDefaults(inputData);\r\n\r\n    let recognizer;\r\n    const { recognizers } = this;\r\n\r\n    // this holds the recognizer that is being recognized.\r\n    // so the recognizer's state needs to be BEGAN, CHANGED, ENDED or RECOGNIZED\r\n    // if no recognizer is detecting a thing, it is set to `null`\r\n    let { curRecognizer } = session;\r\n\r\n    // reset when the last recognizer is recognized\r\n    // or when we're in a new session\r\n    if (!curRecognizer || (curRecognizer && curRecognizer.state & STATE_RECOGNIZED)) {\r\n      session.curRecognizer = null;\r\n      curRecognizer = null;\r\n    }\r\n\r\n    let i = 0;\r\n\r\n    while (i < recognizers.length) {\r\n      recognizer = recognizers[i];\r\n\r\n      // find out if we are allowed try to recognize the input for this one.\r\n      // 1.   allow if the session is NOT forced stopped (see the .stop() method)\r\n      // 2.   allow if we still haven't recognized a gesture in this session, or the this recognizer is the one\r\n      //      that is being recognized.\r\n      // 3.   allow if the recognizer is allowed to run simultaneous with the current recognized recognizer.\r\n      //      this can be setup with the `recognizeWith()` method on the recognizer.\r\n      if (session.stopped !== FORCED_STOP && (// 1\r\n        !curRecognizer || recognizer === curRecognizer || // 2\r\n        recognizer.canRecognizeWith(curRecognizer))) { // 3\r\n        recognizer.recognize(inputData);\r\n      } else {\r\n        recognizer.reset();\r\n      }\r\n\r\n      // if the recognizer has been recognizing the input as a valid gesture, we want to store this one as the\r\n      // current active recognizer. but only if we don't already have an active recognizer\r\n      if (!curRecognizer && recognizer.state & (STATE_BEGAN | STATE_CHANGED | STATE_ENDED)) {\r\n        session.curRecognizer = recognizer;\r\n        curRecognizer = recognizer;\r\n      }\r\n      i++;\r\n    }\r\n  }\r\n\r\n\t/**\r\n\t * @private\r\n\t * get a recognizer by its event name.\r\n\t * @param {Recognizer|String} recognizer\r\n\t * @returns {Recognizer|Null}\r\n\t */\r\n  get(recognizer) {\r\n    if (recognizer instanceof Recognizer) {\r\n      return recognizer;\r\n    }\r\n\r\n    const { recognizers } = this;\r\n\r\n    for (let i = 0; i < recognizers.length; i++) {\r\n      if (recognizers[i].options.event === recognizer) {\r\n        return recognizers[i];\r\n      }\r\n    }\r\n    return null;\r\n  }\r\n\r\n\t/**\r\n\t * @private add a recognizer to the manager\r\n\t * existing recognizers with the same event name will be removed\r\n\t * @param {Recognizer} recognizer\r\n\t * @returns {Recognizer|Manager}\r\n\t */\r\n  add(recognizer) {\r\n    if (invokeArrayArg(recognizer, \"add\", this)) {\r\n      return this;\r\n    }\r\n\r\n    // remove existing\r\n    const existing = this.get(recognizer.options.event);\r\n\r\n    if (existing) {\r\n      this.remove(existing);\r\n    }\r\n\r\n    this.recognizers.push(recognizer);\r\n    recognizer.manager = this;\r\n\r\n    this.touchAction.update();\r\n    return recognizer;\r\n  }\r\n\r\n\t/**\r\n\t * @private\r\n\t * remove a recognizer by name or instance\r\n\t * @param {Recognizer|String} recognizer\r\n\t * @returns {Manager}\r\n\t */\r\n  remove(recognizer) {\r\n    if (invokeArrayArg(recognizer, \"remove\", this)) {\r\n      return this;\r\n    }\r\n\r\n    const targetRecognizer = this.get(recognizer);\r\n\r\n    // let's make sure this recognizer exists\r\n    if (recognizer) {\r\n      const { recognizers } = this;\r\n      const index = inArray(recognizers, targetRecognizer);\r\n\r\n      if (index !== -1) {\r\n        recognizers.splice(index, 1);\r\n        this.touchAction.update();\r\n      }\r\n    }\r\n\r\n    return this;\r\n  }\r\n\r\n\t/**\r\n\t * @private\r\n\t * bind event\r\n\t * @param {String} events\r\n\t * @param {Function} handler\r\n\t * @returns {EventEmitter} this\r\n\t */\r\n  on(events, handler) {\r\n    if (events === undefined || handler === undefined) {\r\n      return this;\r\n    }\r\n\r\n    const { handlers } = this;\r\n\r\n    each(splitStr(events), event => {\r\n      handlers[event] = handlers[event] || [];\r\n      handlers[event].push(handler);\r\n    });\r\n    return this;\r\n  }\r\n\r\n\t/**\r\n\t * @private unbind event, leave emit blank to remove all handlers\r\n\t * @param {String} events\r\n\t * @param {Function} [handler]\r\n\t * @returns {EventEmitter} this\r\n\t */\r\n  off(events, handler) {\r\n    if (events === undefined) {\r\n      return this;\r\n    }\r\n\r\n    const { handlers } = this;\r\n\r\n    each(splitStr(events), event => {\r\n      if (!handler) {\r\n        delete handlers[event];\r\n      } else {\r\n        handlers[event] && handlers[event].splice(inArray(handlers[event], handler), 1);\r\n      }\r\n    });\r\n    return this;\r\n  }\r\n\r\n\t/**\r\n\t * @private emit event to the listeners\r\n\t * @param {String} event\r\n\t * @param {Object} data\r\n\t */\r\n  emit(event, data) {\r\n    // we also want to trigger dom events\r\n    if (this.options.domEvents) {\r\n      triggerDomEvent(event, data);\r\n    }\r\n\r\n    // no handlers, so skip it all\r\n    const handlers = this.handlers[event] && this.handlers[event].slice();\r\n\r\n    if (!handlers || !handlers.length) {\r\n      return;\r\n    }\r\n\r\n    data.type = event;\r\n    data.preventDefault = function () {\r\n      data.srcEvent.preventDefault();\r\n    };\r\n\r\n    let i = 0;\r\n\r\n    while (i < handlers.length) {\r\n      handlers[i](data);\r\n      i++;\r\n    }\r\n  }\r\n\r\n\t/**\r\n\t * @private\r\n\t * destroy the manager and unbinds all events\r\n\t * it doesn't unbind dom events, that is the user own responsibility\r\n\t */\r\n  destroy() {\r\n    this.element && toggleCssProps(this, false);\r\n\r\n    this.handlers = {};\r\n    this.session = {};\r\n    this.input.destroy();\r\n    this.element = null;\r\n  }\r\n}\r\n","import {\r\n    INPUT_START,\r\n    INPUT_MOVE,\r\n    INPUT_END,\r\n    INPUT_CANCEL,\r\n    INPUT_TYPE_TOUCH\r\n} from '../inputjs/input-consts';\r\nimport Input from '../inputjs/input-constructor';\r\nimport toArray from '../utils/to-array';\r\nimport uniqueArray from '../utils/unique-array';\r\n\r\nconst SINGLE_TOUCH_INPUT_MAP = {\r\n  touchstart: INPUT_START,\r\n  touchmove: INPUT_MOVE,\r\n  touchend: INPUT_END,\r\n  touchcancel: INPUT_CANCEL\r\n};\r\n\r\nconst SINGLE_TOUCH_TARGET_EVENTS = 'touchstart';\r\nconst SINGLE_TOUCH_WINDOW_EVENTS = 'touchstart touchmove touchend touchcancel';\r\n\r\n/**\r\n * @private\r\n * Touch events input\r\n * @constructor\r\n * @extends Input\r\n */\r\nexport default class SingleTouchInput extends Input {\r\n  constructor() {\r\n    var proto = SingleTouchInput.prototype;\r\n    proto.evTarget = SINGLE_TOUCH_TARGET_EVENTS;\r\n    proto.evWin = SINGLE_TOUCH_WINDOW_EVENTS;\r\n\r\n    super(...arguments);\r\n    this.started = false;\r\n  }\r\n\r\n  handler(ev) {\r\n    let type = SINGLE_TOUCH_INPUT_MAP[ev.type];\r\n\r\n    // should we handle the touch events?\r\n    if (type === INPUT_START) {\r\n      this.started = true;\r\n    }\r\n\r\n    if (!this.started) {\r\n      return;\r\n    }\r\n\r\n    let touches = normalizeSingleTouches.call(this, ev, type);\r\n\r\n    // when done, reset the started state\r\n    if (type & (INPUT_END | INPUT_CANCEL) && touches[0].length - touches[1].length === 0) {\r\n      this.started = false;\r\n    }\r\n\r\n    this.callback(this.manager, type, {\r\n      pointers: touches[0],\r\n      changedPointers: touches[1],\r\n      pointerType: INPUT_TYPE_TOUCH,\r\n      srcEvent: ev\r\n    });\r\n  }\r\n}\r\n\r\n/**\r\n * @private\r\n * @this {TouchInput}\r\n * @param {Object} ev\r\n * @param {Number} type flag\r\n * @returns {undefined|Array} [all, changed]\r\n */\r\nfunction normalizeSingleTouches(ev, type) {\r\n  let all = toArray(ev.touches);\r\n  let changed = toArray(ev.changedTouches);\r\n\r\n  if (type & (INPUT_END | INPUT_CANCEL)) {\r\n    all = uniqueArray(all.concat(changed), 'identifier', true);\r\n  }\r\n\r\n  return [all, changed];\r\n}\r\n","/**\r\n * @private\r\n * wrap a method with a deprecation warning and stack trace\r\n * @param {Function} method\r\n * @param {String} name\r\n * @param {String} message\r\n * @returns {Function} A new function wrapping the supplied method.\r\n */\r\nexport default function deprecate(method, name, message) {\r\n  let deprecationMessage = `DEPRECATED METHOD: ${name}\\n${message} AT \\n`;\r\n  return function() {\r\n    let e = new Error('get-stack-trace');\r\n    let stack = e && e.stack ? e.stack.replace(/^[^\\(]+?[\\n$]/gm, '')\r\n        .replace(/^\\s+at\\s+/gm, '')\r\n        .replace(/^Object.<anonymous>\\s*\\(/gm, '{anonymous}()@') : 'Unknown Stack Trace';\r\n\r\n    let log = window.console && (window.console.warn || window.console.log);\r\n    if (log) {\r\n      log.call(window.console, deprecationMessage, stack);\r\n    }\r\n    return method.apply(this, arguments);\r\n  };\r\n}\r\n","import deprecate from './deprecate';\r\n/**\r\n * @private\r\n * extend object.\r\n * means that properties in dest will be overwritten by the ones in src.\r\n * @param {Object} dest\r\n * @param {Object} src\r\n * @param {Boolean} [merge=false]\r\n * @returns {Object} dest\r\n */\r\nconst extend = deprecate((dest, src, merge) => {\r\n  let keys = Object.keys(src);\r\n  let i = 0;\r\n  while (i < keys.length) {\r\n    if (!merge || (merge && dest[keys[i]] === undefined)) {\r\n      dest[keys[i]] = src[keys[i]];\r\n    }\r\n    i++;\r\n  }\r\n  return dest;\r\n}, 'extend', 'Use `assign`.');\r\n\r\nexport default extend;\r\n","import deprecate from './deprecate';\r\nimport extend from './extend';\r\n/**\r\n * @private\r\n * merge the values from src in the dest.\r\n * means that properties that exist in dest will not be overwritten by src\r\n * @param {Object} dest\r\n * @param {Object} src\r\n * @returns {Object} dest\r\n */\r\nconst merge = deprecate((dest, src) => {\r\n  return extend(dest, src, true);\r\n}, 'merge', 'Use `assign`.');\r\n\r\nexport default merge;\r\n","import assign from './assign';\r\n/**\r\n * @private\r\n * simple class inheritance\r\n * @param {Function} child\r\n * @param {Function} base\r\n * @param {Object} [properties]\r\n */\r\nexport default function inherit(child, base, properties) {\r\n  let baseP = base.prototype;\r\n  let childP;\r\n\r\n  childP = child.prototype = Object.create(baseP);\r\n  childP.constructor = child;\r\n  childP._super = baseP;\r\n\r\n  if (properties) {\r\n    assign(childP, properties);\r\n  }\r\n}\r\n","/**\r\n * @private\r\n * simple function bind\r\n * @param {Function} fn\r\n * @param {Object} context\r\n * @returns {Function}\r\n */\r\nexport default function bindFn(fn, context) {\r\n  return function boundFn() {\r\n    return fn.apply(context, arguments);\r\n  };\r\n}\r\n","import Manager from \"./manager\";\r\nimport defaults, { preset } from \"./defaults\";\r\nimport assign from './utils/assign';\r\nimport {\r\n  INPUT_START,\r\n  INPUT_MOVE,\r\n  INPUT_END,\r\n  INPUT_CANCEL,\r\n  DIRECTION_NONE,\r\n  DIRECTION_LEFT,\r\n  DIRECTION_RIGHT,\r\n  DIRECTION_UP,\r\n  DIRECTION_DOWN,\r\n  DIRECTION_HORIZONTAL,\r\n  DIRECTION_VERTICAL,\r\n  DIRECTION_ALL,\r\n} from \"./inputjs/input-consts\";\r\nimport {\r\n  STATE_POSSIBLE,\r\n  STATE_BEGAN,\r\n  STATE_CHANGED,\r\n  STATE_ENDED,\r\n  STATE_RECOGNIZED,\r\n  STATE_CANCELLED,\r\n  STATE_FAILED,\r\n} from \"./recognizerjs/recognizer-consts\";\r\n\r\nimport Input from \"./inputjs/input-constructor\";\r\nimport TouchAction from \"./touchactionjs/touchaction-constructor\";\r\nimport TouchInput from \"./input/touch\";\r\nimport MouseInput from \"./input/mouse\";\r\nimport PointerEventInput from \"./input/pointerevent\";\r\nimport SingleTouchInput from \"./input/singletouch\";\r\nimport TouchMouseInput from \"./input/touchmouse\";\r\n\r\nimport Recognizer from \"./recognizerjs/recognizer-constructor\";\r\nimport AttrRecognizer from \"./recognizers/attribute\";\r\nimport TapRecognizer from \"./recognizers/tap\";\r\nimport PanRecognizer from \"./recognizers/pan\";\r\nimport SwipeRecognizer from \"./recognizers/swipe\";\r\nimport PinchRecognizer from \"./recognizers/pinch\";\r\nimport RotateRecognizer from \"./recognizers/rotate\";\r\nimport PressRecognizer from \"./recognizers/press\";\r\n\r\nimport addEventListeners from \"./utils/add-event-listeners\";\r\nimport removeEventListeners from \"./utils/remove-event-listeners\";\r\nimport each from \"./utils/each\";\r\nimport merge from \"./utils/merge\";\r\nimport extend from \"./utils/extend\";\r\nimport inherit from \"./utils/inherit\";\r\nimport bindFn from \"./utils/bind-fn\";\r\nimport prefixed from \"./utils/prefixed\";\r\nimport toArray from \"./utils/to-array\";\r\nimport uniqueArray from \"./utils/unique-array\";\r\nimport splitStr from \"./utils/split-str\";\r\nimport inArray from \"./utils/in-array\";\r\nimport boolOrFn from \"./utils/bool-or-fn\";\r\nimport hasParent from \"./utils/has-parent\";\r\n/**\r\n * @private\r\n * Simple way to create a manager with a default set of recognizers.\r\n * @param {HTMLElement} element\r\n * @param {Object} [options]\r\n * @constructor\r\n */\r\nexport default class Hammer {\r\n\t/**\r\n   * @private\r\n   * @const {string}\r\n   */\r\n\tstatic VERSION = \"#__VERSION__#\";\r\n\tstatic DIRECTION_ALL = DIRECTION_ALL;\r\n\tstatic DIRECTION_DOWN = DIRECTION_DOWN;\r\n\tstatic DIRECTION_LEFT = DIRECTION_LEFT;\r\n\tstatic DIRECTION_RIGHT = DIRECTION_RIGHT;\r\n\tstatic DIRECTION_UP = DIRECTION_UP;\r\n\tstatic DIRECTION_HORIZONTAL = DIRECTION_HORIZONTAL;\r\n\tstatic DIRECTION_VERTICAL = DIRECTION_VERTICAL;\r\n\tstatic DIRECTION_NONE = DIRECTION_NONE;\r\n\tstatic DIRECTION_DOWN = DIRECTION_DOWN;\r\n\tstatic INPUT_START = INPUT_START;\r\n\tstatic INPUT_MOVE = INPUT_MOVE;\r\n  static INPUT_END = INPUT_END;\r\n\tstatic INPUT_CANCEL = INPUT_CANCEL;\r\n\tstatic STATE_POSSIBLE = STATE_POSSIBLE;\r\n\tstatic STATE_BEGAN = STATE_BEGAN;\r\n\tstatic STATE_CHANGED = STATE_CHANGED;\r\n\tstatic STATE_ENDED = STATE_ENDED;\r\n\tstatic STATE_RECOGNIZED = STATE_RECOGNIZED;\r\n\tstatic STATE_CANCELLED = STATE_CANCELLED;\r\n\tstatic STATE_FAILED = STATE_FAILED;\r\n\tstatic Manager = Manager;\r\n\tstatic Input = Input;\r\n\tstatic TouchAction = TouchAction;\r\n\tstatic TouchInput = TouchInput;\r\n\tstatic MouseInput = MouseInput;\r\n\tstatic PointerEventInput = PointerEventInput;\r\n\tstatic TouchMouseInput = TouchMouseInput;\r\n\tstatic SingleTouchInput = SingleTouchInput;\r\n\tstatic Recognizer = Recognizer;\r\n\tstatic AttrRecognizer = AttrRecognizer;\r\n\tstatic Tap = TapRecognizer;\r\n\tstatic Pan = PanRecognizer;\r\n\tstatic Swipe = SwipeRecognizer;\r\n\tstatic Pinch = PinchRecognizer;\r\n\tstatic Rotate = RotateRecognizer;\r\n\tstatic Press = PressRecognizer;\r\n\tstatic on = addEventListeners;\r\n\tstatic off = removeEventListeners;\r\n\tstatic each = each;\r\n\tstatic merge = merge;\r\n\tstatic extend = extend;\r\n\tstatic bindFn = bindFn;\r\n\tstatic assign = assign;\r\n\tstatic inherit = inherit;\r\n\tstatic bindFn = bindFn;\r\n\tstatic prefixed = prefixed;\r\n\tstatic toArray = toArray;\r\n\tstatic inArray = inArray;\r\n\tstatic uniqueArray = uniqueArray;\r\n\tstatic splitStr = splitStr;\r\n\tstatic boolOrFn = boolOrFn;\r\n\tstatic hasParent = hasParent;\r\n\tstatic addEventListeners = addEventListeners;\r\n\tstatic removeEventListeners = removeEventListeners;\r\n\tstatic defaults = assign({}, defaults, { preset });\r\n\tconstructor(element, options = {}) {\r\n\t\treturn new Manager(element, {\r\n\t\t\trecognizers: [\r\n        // RecognizerClass, options, [recognizeWith, ...], [requireFailure, ...]\r\n        ...preset\r\n\t\t\t],\r\n\t\t\t...options,\r\n\t\t});\r\n\t}\r\n}\r\n"],"names":["assign","Object","target","undefined","TypeError","output","index","arguments","length","source","nextKey","hasOwnProperty","VENDOR_PREFIXES","TEST_ELEMENT","document","style","createElement","TYPE_FUNCTION","round","Math","abs","now","Date","prefixed","obj","property","prefix","prop","camelProp","toUpperCase","slice","i","win","window","PREFIXED_TOUCH_ACTION","NATIVE_TOUCH_ACTION","getTouchActionProps","touchMap","cssSupports","CSS","supports","forEach","val","TOUCH_ACTION_COMPUTE","TOUCH_ACTION_AUTO","TOUCH_ACTION_MANIPULATION","TOUCH_ACTION_NONE","TOUCH_ACTION_PAN_X","TOUCH_ACTION_PAN_Y","TOUCH_ACTION_MAP","MOBILE_REGEX","SUPPORT_TOUCH","SUPPORT_POINTER_EVENTS","SUPPORT_ONLY_TOUCH","test","navigator","userAgent","INPUT_TYPE_TOUCH","INPUT_TYPE_PEN","INPUT_TYPE_MOUSE","INPUT_TYPE_KINECT","COMPUTE_INTERVAL","INPUT_START","INPUT_MOVE","INPUT_END","INPUT_CANCEL","DIRECTION_NONE","DIRECTION_LEFT","DIRECTION_RIGHT","DIRECTION_UP","DIRECTION_DOWN","DIRECTION_HORIZONTAL","DIRECTION_VERTICAL","DIRECTION_ALL","PROPS_XY","PROPS_CLIENT_XY","each","iterator","context","call","boolOrFn","args","apply","inStr","str","find","indexOf","cleanTouchActions","actions","hasPanX","hasPanY","TouchAction","manager","value","set","compute","element","toLowerCase","trim","update","options","touchAction","recognizers","recognizer","enable","concat","getTouchAction","join","preventDefaults","input","srcEvent","direction","offsetDirection","session","prevented","preventDefault","hasNone","isTapPointer","pointers","isTapMovement","distance","isTapTouchTime","deltaTime","preventSrc","hasParent","node","parent","parentNode","getCenter","pointersLength","x","clientX","y","clientY","simpleCloneInputData","timeStamp","center","deltaX","deltaY","getDistance","p1","p2","props","sqrt","getAngle","atan2","PI","getDirection","computeDeltaXY","offset","offsetDelta","prevDelta","prevInput","eventType","getVelocity","getScale","start","end","getRotation","startSorted","identifier","start0","start1","endSorted","end0","end1","computeIntervalInputData","last","lastInterval","velocity","velocityX","velocityY","v","computeInputData","firstInput","firstMultiple","offsetCenter","angle","overallVelocity","overallVelocityX","overallVelocityY","scale","rotation","maxPointers","srcEventTarget","composedPath","path","inputHandler","pointersLen","changedPointersLen","changedPointers","isFirst","isFinal","emit","recognize","splitStr","split","addEventListeners","types","handler","type","addEventListener","removeEventListeners","removeEventListener","getWindowForElement","doc","ownerDocument","defaultView","parentWindow","Input","callback","self","inputTarget","domHandler","ev","init","evEl","evTarget","evWin","destroy","inArray","src","findByKey","POINTER_INPUT_MAP","pointerdown","pointermove","pointerup","pointercancel","pointerout","IE10_POINTER_TYPE_ENUM","POINTER_ELEMENT_EVENTS","POINTER_WINDOW_EVENTS","MSPointerEvent","PointerEvent","PointerEventInput","proto","prototype","store","pointerEvents","removePointer","eventTypeNormalized","replace","pointerType","isTouch","storeIndex","pointerId","button","push","splice","toArray","Array","uniqueArray","key","sort","results","values","a","b","TOUCH_INPUT_MAP","touchstart","touchmove","touchend","touchcancel","TOUCH_TARGET_EVENTS","TouchInput","targetIds","touches","getTouches","allTouches","targetTouches","changedTouches","changedTargetTouches","filter","touch","MOUSE_INPUT_MAP","mousedown","mousemove","mouseup","MOUSE_ELEMENT_EVENTS","MOUSE_WINDOW_EVENTS","MouseInput","pressed","which","DEDUP_TIMEOUT","DEDUP_DISTANCE","setLastTouch","eventData","primaryTouch","lastTouch","lts","lastTouches","removeLastTouch","setTimeout","recordTouches","isSyntheticEvent","t","dx","dy","TouchMouseInput","inputEvent","inputData","isMouse","sourceCapabilities","firesTouchEvents","mouse","createInputInstance","Type","inputClass","invokeArrayArg","arg","fn","isArray","STATE_POSSIBLE","STATE_BEGAN","STATE_CHANGED","STATE_ENDED","STATE_RECOGNIZED","STATE_CANCELLED","STATE_FAILED","_uniqueId","uniqueId","getRecognizerByNameIfManager","otherRecognizer","get","stateStr","state","Recognizer","id","simultaneous","requireFail","recognizeWith","dropRecognizeWith","requireFailure","dropRequireFailure","hasRequireFailures","canRecognizeWith","event","additionalEvent","tryEmit","canEmit","inputDataClone","reset","process","TapRecognizer","taps","interval","time","threshold","posThreshold","pTime","pCenter","_timer","_input","count","validPointers","validMovement","validTouchTime","failTimeout","validInterval","validMultiTap","tapCount","clearTimeout","AttrRecognizer","attrTest","optionPointers","isRecognized","isValid","directionStr","PanRecognizer","pX","pY","directionTest","hasMoved","SwipeRecognizer","PinchRecognizer","inOut","RotateRecognizer","PressRecognizer","validTime","domEvents","cssProps","userSelect","touchSelect","touchCallout","contentZooming","userDrag","tapHighlightColor","preset","STOP","FORCED_STOP","toggleCssProps","add","name","oldCssProps","triggerDomEvent","data","gestureEvent","createEvent","initEvent","gesture","dispatchEvent","Manager","defaults","handlers","item","stop","force","stopped","curRecognizer","existing","remove","targetRecognizer","on","events","off","SINGLE_TOUCH_INPUT_MAP","SINGLE_TOUCH_TARGET_EVENTS","SINGLE_TOUCH_WINDOW_EVENTS","SingleTouchInput","started","normalizeSingleTouches","all","changed","deprecate","method","message","deprecationMessage","e","Error","stack","log","console","warn","extend","dest","merge","keys","inherit","child","base","properties","baseP","childP","create","constructor","_super","bindFn","boundFn","Hammer","VERSION","Tap","Pan","Swipe","Pinch","Rotate","Press"],"mappings":"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"}